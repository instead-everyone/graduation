<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="../../CodeGeneration/common.ttinclude"#>
<#@ include file="../../CodeGeneration/config.ttinclude"#>
<#@ output extension=".cs"#>
<#
    // 删除当前目录下所有.cs文件
    foreach (var item in Directory.GetFiles(Path.GetDirectoryName(Host.TemplateFile), "*.cs"))
    {
        File.Delete(item);
    }

    // 项目根目录
    string projectPath = Host.ResolveAssemblyReference("$(ProjectDir)");
    // 用户根目录
    string userPath = Directory.GetParent(Directory.GetParent(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData)).FullName).FullName;

    XDocument prjDoc = XDocument.Load(projectPath + namespaceName + subName + ".Model.csproj");
    var node = prjDoc.Element("Project").Elements().SelectMany(x => x.Elements("PackageReference")).FirstOrDefault(x => x.Attribute("Include").Value == "Mooho.Base");
    string version = node.Attribute("Version").Value;

    // Mooho.Base.Common目录
    XDocument commonDoc = XDocument.Load(userPath + "\\.nuget\\packages\\mooho.base\\" + version + "\\lib\\net5.0\\Mooho.Base.Common.xml");
    // Mooho.Base.Model目录
    XDocument baseDoc = XDocument.Load(userPath + "\\.nuget\\packages\\mooho.base\\" + version + "\\lib\\net5.0\\Mooho.Base.Model.xml");

    var fileManager = EntityFrameworkTemplateFileManager.Create(this);

    // 获取表信息
	DataSet tableSet = this.GetTableData();

    // 循环每个表
    foreach (DataRow tableRow in tableSet.Tables[0].Rows)
    {
        string tableName = tableRow["TABLE_NAME"].ToString();
        string tableType = tableRow["TABLE_TYPE"].ToString().Trim();
        string tableComment = tableRow["TABLE_COMMENT"].ToString();
        string entityName= this.GetEntityName(tableName);

        bool isExt = Convert.ToInt32(tableRow["TABLE_ISEXT"]) == 1;

        string baseType = "EntityBase";

        if (isExt)
        {
            baseType = "Mooho.Base.Model." + entityName;
        }

        if ((this.IsModelExist(commonDoc, entityName) || this.IsModelExist(baseDoc, entityName)) && !isExt)
        {
            // 基础表，且没有扩展字段
            continue;
        }

        fileManager.StartNewFile(entityName + ".cs");
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Mooho.Base.Common;
using Mooho.Base.Model;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Runtime.Serialization;

namespace <#=namespaceName#><#=subName#>.Model
{
    /// <summary>
    /// <#=tableComment#>
    /// </summary>
	[Description("<#=tableComment#>")]
    [Table("<#=tableName#>")]
    public partial class <#=entityName#> : <#=baseType#>
    {
<#
        // 获取字段信息
	    DataSet columnSet = this.GetColumnData(tableName);

        foreach (DataRow columnRow in columnSet.Tables[0].Rows)
        {
            string columnName = columnRow["COLUMN_NAME"].ToString();
            string columnType = columnRow["COLUMN_TYPE"].ToString();
            bool isNullable = Convert.ToBoolean(columnRow["IS_NULLABLE"]);
            string columnComment = columnRow["COLUMN_COMMENT"].ToString();
            string prec = columnRow["PREC"].ToString();
            string scale = columnRow["SCALE"].ToString();

            string propertyName = this.GetPropertyName(columnName);
            if (propertyName.EndsWith("ID") && !columnComment.EndsWith("编号"))
            {
                columnComment += "编号";
            }

            if ((this.IsPropertyExist(commonDoc, entityName, propertyName) || this.IsPropertyExist(baseDoc, entityName, propertyName)) || propertyName == "Ext")
            {
                // 基础字段
                continue;
            }

            string propertyType= this.GetPropertyType(columnType, isNullable);

            bool isDataMember = !columnComment.Contains(" -n");
            columnComment = columnComment.Replace(" -n", "");

            bool isEnum = columnComment.Contains(" -e");
            if (isEnum)
            {
                propertyType = propertyName;

                int index = columnComment.IndexOf(" -e");
                if (index + 3 < columnComment.Length && columnComment.Substring(index + 3).Trim() != string.Empty)
                {
                    propertyType = columnComment.Substring(index + 3).Trim();
                }

                columnComment = columnComment.Substring(0, index);

				if (isNullable)
				{
					propertyType += "?";
				}
            }

            bool isKey= Convert.ToInt32(columnRow["COLUMN_KEY"]) == 1 || tableType == "V" && columnName == "id";
#>
        /// <summary>
        /// 获取或设置<#=columnComment#>
        /// </summary>
		[Description("<#=columnComment#>")]
<#
            if(isKey)
            {
#>
        [Key]
<#
            }

            if(isDataMember)
            {
#>
        [DataMember]
<#
            }

            if (isEnum)
            {
            #>
        [Column("<#=columnName#>", TypeName = "varchar(50)")]
        [JsonConverter(typeof(StringEnumConverter))]
<#
            }
            else if (propertyType == "DateTime" || propertyType == "DateTime?")
            {
            #>
        [Column("<#=columnName#>", TypeName="datetime")]
<#
            }
            else if (propertyType == "decimal" || propertyType == "decimal?")
            {
            #>
        [Column("<#=columnName#>", TypeName="decimal(<#=prec#>, <#=scale#>)")]
<#
            }
            else
            {
            #>
        [Column("<#=columnName#>")]
<#
            }

#>
        public <#=propertyType#> <#=propertyName#> { get; set; }

<#
        }

        // 获取外键信息
        DataSet fkSet = this.GetFkData(tableName);

        foreach (DataRow fkRow in fkSet.Tables[0].Rows)
        {
            string fkTableName = fkRow["FK_TABLE_NAME"].ToString();
            string fkTableComment = fkRow["FK_TABLE_COMMENT"].ToString();
            string fkColumnName = fkRow["FK_COLUMN_NAME"].ToString();
            string fkColumnComment = fkRow["FK_COLUMN_COMMENT"].ToString();
            string pkTableName = fkRow["PK_TABLE_NAME"].ToString();
            string pkTableComment = fkRow["PK_TABLE_COMMENT"].ToString();
            bool isDeleted = Convert.ToInt32(fkRow["TABLE_ISDELETED"]) == 1;

            if (fkTableName == tableName)
            {
                // 一对多关系
                string fkPropertyType= this.GetEntityName(pkTableName);
                string fkPropertyName = this.GetPropertyName(fkColumnName);

                if (this.IsPropertyExist(commonDoc, entityName, fkPropertyName) || this.IsPropertyExist(baseDoc, entityName, fkPropertyName))
                {
                    // 基础字段
                    continue;
                }

                if (fkPropertyName.EndsWith("ID"))
                {
                    fkPropertyName = fkPropertyName.Substring(0, fkPropertyName.Length - 2);
                }
                else
                {
                    fkPropertyName += "Entity";
                }
#>
        /// <summary>
        /// 获取或设置<#=fkColumnComment#>
        /// </summary>
        [DataMember]
		[Description("<#=fkColumnComment#>")]
        [ForeignKey("<#=GetPropertyName(fkColumnName)#>")]
<#
                if (this.IsModelExist(commonDoc, fkPropertyType) || this.IsModelExist(baseDoc, fkPropertyType))
                {
                    // 基础表
#>
        public virtual <#=this.IsModelExist(commonDoc, fkPropertyType) || this.IsModelExist(baseDoc, fkPropertyType) ? "" : namespaceName + ".Model."#><#=fkPropertyType#> <#=fkPropertyName#> { get; set; }

<#
                }
                else
                {
#>
        public virtual <#=fkPropertyType#> <#=fkPropertyName#> { get; set; }

<#
                }
            }
            else
            {
                // 集合导航属性包含逻辑删除
                string fkPropertyType = "ICollection<" + this.GetEntityName(fkTableName) + ">";
                string fkPropertyName = this.Pluralize(this.GetEntityName(fkTableName) + "Entity");
                string inversePropertyName = this.GetEntityName(pkTableName);

                string fkPropertyNameInternal = this.Pluralize(this.GetEntityName(fkTableName) + "InternalEntity");

                string fkPropertyTypePublic = "ICollection<" + this.GetEntityName(fkTableName) + ">";
                string fkPropertyNamePublic = this.Pluralize(this.GetEntityName(fkTableName));

                string propertyName = this.GetPropertyName(fkColumnName);

                if (this.IsPropertyExist(commonDoc, this.GetEntityName(fkTableName), propertyName) || this.IsPropertyExist(baseDoc, this.GetEntityName(fkTableName), propertyName))
                {
                    // 基础字段
                    continue;
                }

                if (propertyName != inversePropertyName + "ID")
                {
                    if (propertyName.EndsWith("ID"))
                    {
                        inversePropertyName = this.GetPropertyName(propertyName.Substring(0, propertyName.Length - 2));
                    }
                    else
                    {
                        inversePropertyName = this.GetPropertyName(propertyName.Replace("ID", ""));
                    }

                    fkPropertyName += ("Of" + inversePropertyName);
                    fkPropertyNameInternal += ("Of" + inversePropertyName);
                    fkPropertyNamePublic += ("Of" + inversePropertyName);
                }
#>
        /// <summary>
        /// 获取或设置<#=fkTableComment#>
        /// </summary>
        [InverseProperty("<#=inversePropertyName#>")]
        public virtual <#=fkPropertyType#> <#=fkPropertyName#> { get; set; }

        /// <summary>
        /// 获取或设置<#=fkTableComment#>
        /// </summary>
        [NotMapped]
        private <#=fkPropertyType#> <#=fkPropertyNameInternal#> { get; set; }

        /// <summary>
        /// 获取或设置<#=fkTableComment#>
        /// </summary>
        [NotMapped]
        public <#=fkPropertyTypePublic#> <#=fkPropertyNamePublic#>
        {
            get
            {
                if (this.<#=fkPropertyNameInternal#> == null)
                {
                    this.<#=fkPropertyNameInternal#> = this.<#=fkPropertyName#> == null ? new List<<#=this.GetEntityName(fkTableName)#>>() : this.<#=fkPropertyName#><#=isDeleted ? ".Where(x => !x.IsDeleted)" : ""#>.ToList();
                }

                return this.<#=fkPropertyNameInternal#>;
            }
            set
            {
                this.<#=fkPropertyName#> = value;
                this.<#=fkPropertyNameInternal#> = value;
            }
        }

<#
            }
        }
#>
    }
}
<#
    }

    fileManager.Process();
#>
<#+
    public class RelationShip
    {
        public string RelationName { get; set; }
        public string TableName { get; set; }
        public string TableComment { get; set; }
    }
#>
