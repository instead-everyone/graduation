//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Mooho.Base.Common;
using Mooho.Base.Model;
using accreditation.Model;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text;

namespace accreditation.IDataAccess
{
    /// <summary>
    /// 考核分解项数据访问接口
    /// </summary>
    public partial interface IAssessFragmentDataAccess
    {
        /// <summary>
        /// 新增考核分解项
        /// </summary>
        /// <param name="assessFragment">考核分解项</param>
        /// <return>考核分解项</return>
        AssessFragment AddAssessFragment(AssessFragment assessFragment);

        /// <summary>
        /// 修改考核分解项
        /// </summary>
        /// <param name="assessFragment">考核分解项</param>
        /// <return>考核分解项</return>
        AssessFragment UpdateAssessFragment(AssessFragment assessFragment);

        /// <summary>
        /// 保存考核分解项
        /// </summary>
        /// <param name="assessFragment">考核分解项</param>
        /// <return>考核分解项</return>
        AssessFragment SaveAssessFragment(AssessFragment assessFragment);

        /// <summary>
        /// 删除考核分解项
        /// </summary>
        /// <param name="assessFragment">考核分解项</param>
        void RemoveAssessFragment(AssessFragment assessFragment);

        /// <summary>
        /// 根据条件删除考核分解项
        /// </summary>
        /// <param name="predicate">查询条件</param>
        void RemoveAssessFragment(Expression<Func<AssessFragment, bool>> predicate);

        /// <summary>
        /// 获取考核分解项
        /// </summary>
        /// <param name="id">唯一编号</param>
        /// <returns>考核分解项</returns>
        AssessFragment GetAssessFragment(long id);

        /// <summary>
        /// 获取考核分解项
        /// </summary>
        /// <param name="id">唯一编号</param>
        /// <param name="defaultEntity">默认值</param>
        /// <returns>考核分解项</returns>
        AssessFragment GetAssessFragmentOrDefault(long id, AssessFragment defaultEntity = null);

        /// <summary>
        /// 根据条件获取考核分解项
        /// </summary>
        /// <param name="predicate">查询条件</param>
        /// <returns>考核分解项</returns>
        AssessFragment GetAssessFragment(Expression<Func<AssessFragment, bool>> predicate);

        /// <summary>
        /// 根据条件获取考核分解项
        /// </summary>
        /// <param name="predicate">查询条件</param>
        /// <param name="defaultEntity">默认值</param>
        /// <returns>考核分解项</returns>
        AssessFragment GetAssessFragmentOrDefault(Expression<Func<AssessFragment, bool>> predicate, AssessFragment defaultEntity = null);

        /// <summary>
        /// 根据条件获取考核分解项数量
        /// </summary>
        /// <param name="predicate">查询条件</param>
        /// <returns>考核分解项数量</returns>
        int CountAssessFragment(Expression<Func<AssessFragment, bool>> predicate);

        /// <summary>
        /// 根据条件统计考核分解项
        /// </summary>
        /// <param name="selecter">统计字段</param>
        /// <param name="predicate">查询条件</param>
        /// <returns>统计值</returns>
        int? SumAssessFragment(Expression<Func<AssessFragment, int?>> selecter, Expression<Func<AssessFragment, bool>> predicate);

        /// <summary>
        /// 根据条件统计考核分解项
        /// </summary>
        /// <param name="selecter">统计字段</param>
        /// <param name="predicate">查询条件</param>
        /// <returns>统计值</returns>
        decimal? SumAssessFragment(Expression<Func<AssessFragment, decimal?>> selecter, Expression<Func<AssessFragment, bool>> predicate);

        /// <summary>
        /// 根据条件查询考核分解项
        /// </summary>
        /// <param name="predicate">查询条件</param>
        /// <param name="pages">分页信息</param>
        /// <returns>考核分解项集合</returns>
        List<AssessFragment> QueryAssessFragment(Expression<Func<AssessFragment, bool>> predicate, Pages pages = null);

        /// <summary>
        /// 根据条件查询考核分解项
        /// </summary>
        /// <param name="predicate">查询条件</param>
        /// <param name="dynamicPredicate">动态查询条件</param>
        /// <param name="pages">分页信息</param>
        /// <returns>考核分解项集合</returns>
        List<AssessFragment> QueryAssessFragment(Expression<Func<AssessFragment, bool>> predicate, LambdaExpression dynamicPredicate, Pages pages = null);
    }
}
