//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Mooho.Base.Common;
using Mooho.Base.Model;
using accreditation.Model;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text;

namespace accreditation.IDataAccess
{
    /// <summary>
    /// 教师信息数据访问接口
    /// </summary>
    public partial interface ITeacherInfoDataAccess
    {
        /// <summary>
        /// 新增教师信息
        /// </summary>
        /// <param name="teacherInfo">教师信息</param>
        /// <return>教师信息</return>
        TeacherInfo AddTeacherInfo(TeacherInfo teacherInfo);

        /// <summary>
        /// 修改教师信息
        /// </summary>
        /// <param name="teacherInfo">教师信息</param>
        /// <return>教师信息</return>
        TeacherInfo UpdateTeacherInfo(TeacherInfo teacherInfo);

        /// <summary>
        /// 保存教师信息
        /// </summary>
        /// <param name="teacherInfo">教师信息</param>
        /// <return>教师信息</return>
        TeacherInfo SaveTeacherInfo(TeacherInfo teacherInfo);

        /// <summary>
        /// 删除教师信息
        /// </summary>
        /// <param name="teacherInfo">教师信息</param>
        void RemoveTeacherInfo(TeacherInfo teacherInfo);

        /// <summary>
        /// 根据条件删除教师信息
        /// </summary>
        /// <param name="predicate">查询条件</param>
        void RemoveTeacherInfo(Expression<Func<TeacherInfo, bool>> predicate);

        /// <summary>
        /// 获取教师信息
        /// </summary>
        /// <param name="id">唯一编号</param>
        /// <returns>教师信息</returns>
        TeacherInfo GetTeacherInfo(long id);

        /// <summary>
        /// 获取教师信息
        /// </summary>
        /// <param name="id">唯一编号</param>
        /// <param name="defaultEntity">默认值</param>
        /// <returns>教师信息</returns>
        TeacherInfo GetTeacherInfoOrDefault(long id, TeacherInfo defaultEntity = null);

        /// <summary>
        /// 根据条件获取教师信息
        /// </summary>
        /// <param name="predicate">查询条件</param>
        /// <returns>教师信息</returns>
        TeacherInfo GetTeacherInfo(Expression<Func<TeacherInfo, bool>> predicate);

        /// <summary>
        /// 根据条件获取教师信息
        /// </summary>
        /// <param name="predicate">查询条件</param>
        /// <param name="defaultEntity">默认值</param>
        /// <returns>教师信息</returns>
        TeacherInfo GetTeacherInfoOrDefault(Expression<Func<TeacherInfo, bool>> predicate, TeacherInfo defaultEntity = null);

        /// <summary>
        /// 根据条件获取教师信息数量
        /// </summary>
        /// <param name="predicate">查询条件</param>
        /// <returns>教师信息数量</returns>
        int CountTeacherInfo(Expression<Func<TeacherInfo, bool>> predicate);

        /// <summary>
        /// 根据条件统计教师信息
        /// </summary>
        /// <param name="selecter">统计字段</param>
        /// <param name="predicate">查询条件</param>
        /// <returns>统计值</returns>
        int? SumTeacherInfo(Expression<Func<TeacherInfo, int?>> selecter, Expression<Func<TeacherInfo, bool>> predicate);

        /// <summary>
        /// 根据条件统计教师信息
        /// </summary>
        /// <param name="selecter">统计字段</param>
        /// <param name="predicate">查询条件</param>
        /// <returns>统计值</returns>
        decimal? SumTeacherInfo(Expression<Func<TeacherInfo, decimal?>> selecter, Expression<Func<TeacherInfo, bool>> predicate);

        /// <summary>
        /// 根据条件查询教师信息
        /// </summary>
        /// <param name="predicate">查询条件</param>
        /// <param name="pages">分页信息</param>
        /// <returns>教师信息集合</returns>
        List<TeacherInfo> QueryTeacherInfo(Expression<Func<TeacherInfo, bool>> predicate, Pages pages = null);

        /// <summary>
        /// 根据条件查询教师信息
        /// </summary>
        /// <param name="predicate">查询条件</param>
        /// <param name="dynamicPredicate">动态查询条件</param>
        /// <param name="pages">分页信息</param>
        /// <returns>教师信息集合</returns>
        List<TeacherInfo> QueryTeacherInfo(Expression<Func<TeacherInfo, bool>> predicate, LambdaExpression dynamicPredicate, Pages pages = null);
    }
}
