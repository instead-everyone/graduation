//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Mooho.Base.Common;
using Mooho.Base.Model;
using accreditation.Model;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text;

namespace accreditation.IDataAccess
{
    /// <summary>
    /// 学生信息数据访问接口
    /// </summary>
    public partial interface IStudentInfoDataAccess
    {
        /// <summary>
        /// 新增学生信息
        /// </summary>
        /// <param name="studentInfo">学生信息</param>
        /// <return>学生信息</return>
        StudentInfo AddStudentInfo(StudentInfo studentInfo);

        /// <summary>
        /// 修改学生信息
        /// </summary>
        /// <param name="studentInfo">学生信息</param>
        /// <return>学生信息</return>
        StudentInfo UpdateStudentInfo(StudentInfo studentInfo);

        /// <summary>
        /// 保存学生信息
        /// </summary>
        /// <param name="studentInfo">学生信息</param>
        /// <return>学生信息</return>
        StudentInfo SaveStudentInfo(StudentInfo studentInfo);

        /// <summary>
        /// 删除学生信息
        /// </summary>
        /// <param name="studentInfo">学生信息</param>
        void RemoveStudentInfo(StudentInfo studentInfo);

        /// <summary>
        /// 根据条件删除学生信息
        /// </summary>
        /// <param name="predicate">查询条件</param>
        void RemoveStudentInfo(Expression<Func<StudentInfo, bool>> predicate);

        /// <summary>
        /// 获取学生信息
        /// </summary>
        /// <param name="id">唯一编号</param>
        /// <returns>学生信息</returns>
        StudentInfo GetStudentInfo(long id);

        /// <summary>
        /// 获取学生信息
        /// </summary>
        /// <param name="id">唯一编号</param>
        /// <param name="defaultEntity">默认值</param>
        /// <returns>学生信息</returns>
        StudentInfo GetStudentInfoOrDefault(long id, StudentInfo defaultEntity = null);

        /// <summary>
        /// 根据条件获取学生信息
        /// </summary>
        /// <param name="predicate">查询条件</param>
        /// <returns>学生信息</returns>
        StudentInfo GetStudentInfo(Expression<Func<StudentInfo, bool>> predicate);

        /// <summary>
        /// 根据条件获取学生信息
        /// </summary>
        /// <param name="predicate">查询条件</param>
        /// <param name="defaultEntity">默认值</param>
        /// <returns>学生信息</returns>
        StudentInfo GetStudentInfoOrDefault(Expression<Func<StudentInfo, bool>> predicate, StudentInfo defaultEntity = null);

        /// <summary>
        /// 根据条件获取学生信息数量
        /// </summary>
        /// <param name="predicate">查询条件</param>
        /// <returns>学生信息数量</returns>
        int CountStudentInfo(Expression<Func<StudentInfo, bool>> predicate);

        /// <summary>
        /// 根据条件统计学生信息
        /// </summary>
        /// <param name="selecter">统计字段</param>
        /// <param name="predicate">查询条件</param>
        /// <returns>统计值</returns>
        int? SumStudentInfo(Expression<Func<StudentInfo, int?>> selecter, Expression<Func<StudentInfo, bool>> predicate);

        /// <summary>
        /// 根据条件统计学生信息
        /// </summary>
        /// <param name="selecter">统计字段</param>
        /// <param name="predicate">查询条件</param>
        /// <returns>统计值</returns>
        decimal? SumStudentInfo(Expression<Func<StudentInfo, decimal?>> selecter, Expression<Func<StudentInfo, bool>> predicate);

        /// <summary>
        /// 根据条件查询学生信息
        /// </summary>
        /// <param name="predicate">查询条件</param>
        /// <param name="pages">分页信息</param>
        /// <returns>学生信息集合</returns>
        List<StudentInfo> QueryStudentInfo(Expression<Func<StudentInfo, bool>> predicate, Pages pages = null);

        /// <summary>
        /// 根据条件查询学生信息
        /// </summary>
        /// <param name="predicate">查询条件</param>
        /// <param name="dynamicPredicate">动态查询条件</param>
        /// <param name="pages">分页信息</param>
        /// <returns>学生信息集合</returns>
        List<StudentInfo> QueryStudentInfo(Expression<Func<StudentInfo, bool>> predicate, LambdaExpression dynamicPredicate, Pages pages = null);
    }
}
