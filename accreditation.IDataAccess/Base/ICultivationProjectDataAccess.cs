//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Mooho.Base.Common;
using Mooho.Base.Model;
using accreditation.Model;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text;

namespace accreditation.IDataAccess
{
    /// <summary>
    /// 培养计划数据访问接口
    /// </summary>
    public partial interface ICultivationProjectDataAccess
    {
        /// <summary>
        /// 新增培养计划
        /// </summary>
        /// <param name="cultivationProject">培养计划</param>
        /// <return>培养计划</return>
        CultivationProject AddCultivationProject(CultivationProject cultivationProject);

        /// <summary>
        /// 修改培养计划
        /// </summary>
        /// <param name="cultivationProject">培养计划</param>
        /// <return>培养计划</return>
        CultivationProject UpdateCultivationProject(CultivationProject cultivationProject);

        /// <summary>
        /// 保存培养计划
        /// </summary>
        /// <param name="cultivationProject">培养计划</param>
        /// <return>培养计划</return>
        CultivationProject SaveCultivationProject(CultivationProject cultivationProject);

        /// <summary>
        /// 删除培养计划
        /// </summary>
        /// <param name="cultivationProject">培养计划</param>
        void RemoveCultivationProject(CultivationProject cultivationProject);

        /// <summary>
        /// 根据条件删除培养计划
        /// </summary>
        /// <param name="predicate">查询条件</param>
        void RemoveCultivationProject(Expression<Func<CultivationProject, bool>> predicate);

        /// <summary>
        /// 获取培养计划
        /// </summary>
        /// <param name="id">唯一编号</param>
        /// <returns>培养计划</returns>
        CultivationProject GetCultivationProject(long id);

        /// <summary>
        /// 获取培养计划
        /// </summary>
        /// <param name="id">唯一编号</param>
        /// <param name="defaultEntity">默认值</param>
        /// <returns>培养计划</returns>
        CultivationProject GetCultivationProjectOrDefault(long id, CultivationProject defaultEntity = null);

        /// <summary>
        /// 根据条件获取培养计划
        /// </summary>
        /// <param name="predicate">查询条件</param>
        /// <returns>培养计划</returns>
        CultivationProject GetCultivationProject(Expression<Func<CultivationProject, bool>> predicate);

        /// <summary>
        /// 根据条件获取培养计划
        /// </summary>
        /// <param name="predicate">查询条件</param>
        /// <param name="defaultEntity">默认值</param>
        /// <returns>培养计划</returns>
        CultivationProject GetCultivationProjectOrDefault(Expression<Func<CultivationProject, bool>> predicate, CultivationProject defaultEntity = null);

        /// <summary>
        /// 根据条件获取培养计划数量
        /// </summary>
        /// <param name="predicate">查询条件</param>
        /// <returns>培养计划数量</returns>
        int CountCultivationProject(Expression<Func<CultivationProject, bool>> predicate);

        /// <summary>
        /// 根据条件统计培养计划
        /// </summary>
        /// <param name="selecter">统计字段</param>
        /// <param name="predicate">查询条件</param>
        /// <returns>统计值</returns>
        int? SumCultivationProject(Expression<Func<CultivationProject, int?>> selecter, Expression<Func<CultivationProject, bool>> predicate);

        /// <summary>
        /// 根据条件统计培养计划
        /// </summary>
        /// <param name="selecter">统计字段</param>
        /// <param name="predicate">查询条件</param>
        /// <returns>统计值</returns>
        decimal? SumCultivationProject(Expression<Func<CultivationProject, decimal?>> selecter, Expression<Func<CultivationProject, bool>> predicate);

        /// <summary>
        /// 根据条件查询培养计划
        /// </summary>
        /// <param name="predicate">查询条件</param>
        /// <param name="pages">分页信息</param>
        /// <returns>培养计划集合</returns>
        List<CultivationProject> QueryCultivationProject(Expression<Func<CultivationProject, bool>> predicate, Pages pages = null);

        /// <summary>
        /// 根据条件查询培养计划
        /// </summary>
        /// <param name="predicate">查询条件</param>
        /// <param name="dynamicPredicate">动态查询条件</param>
        /// <param name="pages">分页信息</param>
        /// <returns>培养计划集合</returns>
        List<CultivationProject> QueryCultivationProject(Expression<Func<CultivationProject, bool>> predicate, LambdaExpression dynamicPredicate, Pages pages = null);
    }
}
