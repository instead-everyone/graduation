<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="../common.ttinclude"#>
<#@ include file="../config.ttinclude"#>
<#@ output extension=".cs"#>
<#
    // 删除当前目录下所有.cs文件
    foreach (var item in Directory.GetFiles(Path.GetDirectoryName(Host.TemplateFile), "*.cs"))
    {
        File.Delete(item);
    }

	// 项目根目录
    string projectPath = Host.ResolveAssemblyReference("$(ProjectDir)");
	projectPath = Directory.GetParent(Directory.GetParent(projectPath).FullName).FullName + "\\" + namespaceName + subName + ".DataAccess\\";
    // 用户根目录
    string userPath = Directory.GetParent(Directory.GetParent(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData)).FullName).FullName;

    XDocument prjDoc = XDocument.Load(projectPath + namespaceName + subName + ".DataAccess.csproj");
    var node = prjDoc.Element("Project").Elements().SelectMany(x => x.Elements("PackageReference")).FirstOrDefault(x => x.Attribute("Include").Value == "Mooho.Base");
    string version = node.Attribute("Version").Value;

    XDocument doc = XDocument.Load(userPath + "\\.nuget\\packages\\mooho.base\\" + version + "\\lib\\net5.0\\Mooho.Base.DataAccess.xml");

	CodeGenerationTools code = new CodeGenerationTools(this);

	var fileManager = EntityFrameworkTemplateFileManager.Create(this);

    // 获取表信息
	DataSet tableSet = this.GetTableData();

	foreach (DataRow tableRow in tableSet.Tables[0].Rows)
	{
		string tableName = tableRow["TABLE_NAME"].ToString();
		string tableComment = tableRow["TABLE_COMMENT"].ToString();
		string entityName = this.GetEntityName(tableName);
		bool isDeleted = Convert.ToInt32(tableRow["TABLE_ISDELETED"]) == 1;
		bool isApplication = Convert.ToInt32(tableRow["TABLE_APPLICATION"]) == 1;
		string tableType=  tableRow["TABLE_TYPE"].ToString().Trim();

		if (this.IsModelExist(doc, entityName + "DataAccess"))
        {
            // 基础表
            continue;
        }

		fileManager.StartNewFile("I" + entityName + "Business.cs");
#>
using Mooho.Base.Common;
using <#=namespaceName#><#=subName#>.Model;
using Newtonsoft.Json.Linq;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;

namespace <#=namespaceName#><#=subName#>.IBusiness
{
	/// <summary>
	/// <#=tableComment#>业务逻辑接口
	/// </summary>
	public interface I<#=entityName#>Business
	{
<#
	    if (tableType == "U")
        {
			if (!isApplication)
			{
#>
        /// <summary>
		/// 新增<#=tableComment#>
		/// </summary>
		/// <param name="<#=code.CamelCase(entityName)#>"><#=tableComment#></param>
		/// <return><#=tableComment#></return>
		<#=entityName#> Add<#=entityName#>(<#=entityName#> <#=code.CamelCase(entityName)#>);

		/// <summary>
		/// 修改<#=tableComment#>
		/// </summary>
		/// <param name="<#=code.CamelCase(entityName)#>"><#=tableComment#></param>
		/// <return><#=tableComment#></return>
		<#=entityName#> Update<#=entityName#>(<#=entityName#> <#=code.CamelCase(entityName)#>);

		/// <summary>
		/// 删除<#=tableComment#>
		/// </summary>
		/// <param name="id">唯一编号</param>
		void Remove<#=entityName#>(long id);

<#
			}
			else
			{
#>
        /// <summary>
        /// 提交<#=tableComment#>
        /// </summary>
        /// <param name="<#=code.CamelCase(entityName)#>"><#=tableComment#></param>
        /// <param name="originaterID">发起人</param>
        /// <return><#=tableComment#></return>
        <#=entityName#> Submit<#=entityName#>(<#=entityName#> <#=code.CamelCase(entityName)#>, long originaterID);

        /// <summary>
        /// 保存<#=tableComment#>
        /// </summary>
        /// <param name="<#=code.CamelCase(entityName)#>"><#=tableComment#></param>
        /// <return><#=tableComment#></return>
        <#=entityName#> Save<#=entityName#>(<#=entityName#> <#=code.CamelCase(entityName)#>);

<#
			}
#>
		/// <summary>
		/// 获取<#=tableComment#>
		/// </summary>
		/// <param name="id">唯一编号</param>
		/// <returns><#=tableComment#></returns>
		<#=entityName#> Get<#=entityName#>(long id);

		/// <summary>
		/// 获取<#=tableComment#>
		/// </summary>
		/// <param name="id">唯一编号</param>
		/// <param name="defaultEntity">默认值</param>
		/// <returns><#=tableComment#></returns>
		<#=entityName#> Get<#=entityName#>OrDefault(long id, <#=entityName#> defaultEntity = null);
		
		/// <summary>
		/// 根据条件获取<#=tableComment#>
		/// </summary>
		/// <param name="predicate">查询条件</param>
		/// <returns><#=tableComment#></returns>
		<#=entityName#> Get<#=entityName#>(Expression<Func<<#=entityName#>, bool>> predicate);

		/// <summary>
		/// 根据条件获取<#=tableComment#>
		/// </summary>
		/// <param name="predicate">查询条件</param>
		/// <param name="defaultEntity">默认值</param>
		/// <returns><#=tableComment#></returns>
		<#=entityName#> Get<#=entityName#>OrDefault(Expression<Func<<#=entityName#>, bool>> predicate, <#=entityName#> defaultEntity = null);

<#
		}
#>
		/// <summary>
		/// 根据条件查询<#=tableComment#>
		/// </summary>
		/// <param name="predicate">查询条件</param>
		/// <param name="pages">分页信息</param>
		/// <returns><#=tableComment#>集合</returns>
		List<<#=entityName#>> Query<#=entityName#>(Expression<Func<<#=entityName#>, bool>> predicate, Pages pages = null);

		/// <summary>
        /// 根据条件查询<#=tableComment#>
        /// </summary>
        /// <param name="filter">筛选条件</param>
        /// <param name="pages">分页信息</param>
        /// <returns><#=tableComment#>集合</returns>
        List<<#=entityName#>> Query<#=entityName#>(JObject filter, out Pages pages);
	}
}
<#
	}

	fileManager.Process();
#>
<#+

#>