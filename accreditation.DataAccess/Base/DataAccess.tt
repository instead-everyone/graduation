<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="../../CodeGeneration/common.ttinclude"#>
<#@ include file="../../CodeGeneration/config.ttinclude"#>
<#@ output extension=".cs"#>
<#
    // 删除当前目录下所有.cs文件
    foreach (var item in Directory.GetFiles(Path.GetDirectoryName(Host.TemplateFile), "*.cs"))
    {
        File.Delete(item);
    }

    // 项目根目录
    string projectPath = Host.ResolveAssemblyReference("$(ProjectDir)");
    // 用户根目录
    string userPath = Directory.GetParent(Directory.GetParent(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData)).FullName).FullName;

    XDocument prjDoc = XDocument.Load(projectPath + namespaceName + subName + ".DataAccess.csproj");
    var node = prjDoc.Element("Project").Elements().SelectMany(x => x.Elements("PackageReference")).FirstOrDefault(x => x.Attribute("Include").Value == "Mooho.Base");
    string version = node.Attribute("Version").Value;

    XDocument doc = XDocument.Load(userPath + "\\.nuget\\packages\\mooho.base\\" + version + "\\lib\\net5.0\\Mooho.Base.DataAccess.xml");

    CodeGenerationTools code = new CodeGenerationTools(this);

    var fileManager = EntityFrameworkTemplateFileManager.Create(this);

    // 获取表信息
	DataSet tableSet = this.GetTableData();

    foreach (DataRow tableRow in tableSet.Tables[0].Rows)
    {
        string tableName = tableRow["TABLE_NAME"].ToString().Trim();
        string tableType = tableRow["TABLE_TYPE"].ToString().Trim();
        string tableComment = tableRow["TABLE_COMMENT"].ToString();
        string entityName = this.GetEntityName(tableName);
        bool isDeleted = Convert.ToInt32(tableRow["TABLE_ISDELETED"]) == 1;

        if (this.IsModelExist(doc, entityName + "DataAccess"))
        {
            // 基础表
            continue;
        }

        fileManager.StartNewFile(entityName + "DataAccess.cs");
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Mooho.Base.Common;
using <#=namespaceName#><#=subName#>.IDataAccess;
using <#=namespaceName#><#=subName#>.Model;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text;

namespace <#=namespaceName#><#=subName#>.DataAccess
{
    /// <summary>
    /// <#=tableComment#>数据访问
    /// </summary>
    public partial class <#=entityName#>DataAccess : DataBase, I<#=entityName#>DataAccess
    {
<#
        if (tableType == "U")
        {
#>
        /// <summary>
        /// 新增<#=tableComment#>
        /// </summary>
        /// <param name="<#=code.CamelCase(entityName)#>"><#=tableComment#></param>
        /// <return><#=tableComment#></return>
        public virtual <#=entityName#> Add<#=entityName#>(<#=entityName#> <#=code.CamelCase(entityName)#>)
        {
            <#=entityName#> entity = this.Create(<#=code.CamelCase(entityName)#>.GetType()) as <#=entityName#>;
            entity.ID = <#=code.CamelCase(entityName)#>.ID == 0 ? Utility.NewID() : <#=code.CamelCase(entityName)#>.ID;

			Utility.Copy(<#=code.CamelCase(entityName)#>, entity);

            return this.Context.<#=this.Pluralize(entityName)#>.Add(entity).Entity;
        }

        /// <summary>
        /// 修改<#=tableComment#>
        /// </summary>
        /// <param name="<#=code.CamelCase(entityName)#>"><#=tableComment#></param>
        /// <return><#=tableComment#></return>
        public virtual <#=entityName#> Update<#=entityName#>(<#=entityName#> <#=code.CamelCase(entityName)#>)
        {
            <#=entityName#> entity = this.Context.<#=this.Pluralize(entityName)#>.Find(<#=code.CamelCase(entityName)#>.ID);

			Utility.Copy(<#=code.CamelCase(entityName)#>, entity);

            return entity;
        }

        /// <summary>
        /// 保存<#=tableComment#>
        /// </summary>
        /// <param name="<#=code.CamelCase(entityName)#>"><#=tableComment#></param>
        /// <return><#=tableComment#></return>
        public virtual <#=entityName#> Save<#=entityName#>(<#=entityName#> <#=code.CamelCase(entityName)#>)
        {
            <#=entityName#> entity;

            if (<#=code.CamelCase(entityName)#>.ID != 0)
            {
                entity = this.Context.<#=this.Pluralize(entityName)#>.Find(<#=code.CamelCase(entityName)#>.ID);
                if (entity != null)
                {
			        Utility.Copy(<#=code.CamelCase(entityName)#>, entity);
                    return entity;
                }
            }

            entity = this.Create(<#=code.CamelCase(entityName)#>.GetType()) as <#=entityName#>;
            entity.ID = <#=code.CamelCase(entityName)#>.ID == 0 ? Utility.NewID() : <#=code.CamelCase(entityName)#>.ID;

			Utility.Copy(<#=code.CamelCase(entityName)#>, entity);

            return this.Context.<#=this.Pluralize(entityName)#>.Add(entity).Entity;
        }

        /// <summary>
        /// 删除<#=tableComment#>
        /// </summary>
        /// <param name="<#=code.CamelCase(entityName)#>"><#=tableComment#></param>
        public virtual void Remove<#=entityName#>(<#=entityName#> <#=code.CamelCase(entityName)#>)
        {
<#
            if (isDeleted)
            {
#>
            <#=code.CamelCase(entityName)#>.IsDeleted = true;
<#
            }
			else
            {
#>
            this.Context.<#=this.Pluralize(entityName)#>.Remove(<#=code.CamelCase(entityName)#>);
<#
            }
#>
        }

        /// <summary>
        /// 根据条件删除<#=tableComment#>
        /// </summary>
        /// <param name="predicate">查询条件</param>
        public virtual void Remove<#=entityName#>(Expression<Func<<#=entityName#>, bool>> predicate)
        {
            List<<#=entityName#>> <#=this.Pluralize(code.CamelCase(entityName))#> = this.Query<#=entityName#>(predicate);
            foreach (<#=entityName#> <#=code.CamelCase(entityName)#> in <#=this.Pluralize(code.CamelCase(entityName))#>)
            {
                this.Remove<#=entityName#>(<#=code.CamelCase(entityName)#>);
            }
        }

        /// <summary>
        /// 获取<#=tableComment#>
        /// </summary>
        /// <param name="id">唯一编号</param>
        /// <returns><#=tableComment#></returns>
        public virtual <#=entityName#> Get<#=entityName#>(long id)
        {
            <#=entityName#> entity = this.Allow(this.Context.<#=this.Pluralize(entityName)#>)<#=isDeleted?".Where(x => !x.IsDeleted)":""#>.FirstOrDefault(x => x.ID == id);

            if (entity == null)
            {
                throw new ApplicationException("<#=tableComment#>不存在");
            }
            else
            {
                return entity;
            }
        }

        /// <summary>
        /// 获取<#=tableComment#>
        /// </summary>
        /// <param name="id">唯一编号</param>
        /// <param name="defaultEntity">默认值</param>
        /// <returns><#=tableComment#></returns>
        public virtual <#=entityName#> Get<#=entityName#>OrDefault(long id, <#=entityName#> defaultEntity = null)
        {
            return this.Allow(this.Context.<#=this.Pluralize(entityName)#>)<#=isDeleted?".Where(x => !x.IsDeleted)":""#>.FirstOrDefault(x => x.ID == id) ?? defaultEntity;
        }

<#
        }
#>
        /// <summary>
        /// 根据条件获取<#=tableComment#>
        /// </summary>
        /// <param name="predicate">查询条件</param>
        /// <returns><#=tableComment#></returns>
        public virtual <#=entityName#> Get<#=entityName#>(Expression<Func<<#=entityName#>, bool>> predicate)
        {
            <#=entityName#> entity = this.Allow(this.Context.<#=this.Pluralize(entityName)#>)<#=isDeleted?".Where(x => !x.IsDeleted)":""#>.FirstOrDefault(predicate);

            if (entity == null)
            {
                throw new ApplicationException("<#=tableComment#>不存在");
            }
            else
            {
                return entity;
            }
        }

        /// <summary>
        /// 根据条件获取<#=tableComment#>
        /// </summary>
        /// <param name="predicate">查询条件</param>
        /// <param name="defaultEntity">默认值</param>
        /// <returns><#=tableComment#></returns>
        public virtual <#=entityName#> Get<#=entityName#>OrDefault(Expression<Func<<#=entityName#>, bool>> predicate, <#=entityName#> defaultEntity = null)
        {
            return this.Allow(this.Context.<#=this.Pluralize(entityName)#>)<#=isDeleted?".Where(x => !x.IsDeleted)":""#>.FirstOrDefault(predicate) ?? defaultEntity;
        }

        /// <summary>
        /// 根据条件获取<#=tableComment#>数量
        /// </summary>
        /// <param name="predicate">查询条件</param>
        /// <returns><#=tableComment#>数量</returns>
        public virtual int Count<#=entityName#>(Expression<Func<<#=entityName#>, bool>> predicate)
        {
            return this.Allow(this.Context.<#=this.Pluralize(entityName)#>)<#=isDeleted?".Where(x => !x.IsDeleted)":""#>.Where(predicate).Count();
        }

        /// <summary>
        /// 根据条件统计<#=tableComment#>
        /// </summary>
        /// <param name="selecter">统计字段</param>
        /// <param name="predicate">查询条件</param>
        /// <returns>统计值</returns>
        public virtual int? Sum<#=entityName#>(Expression<Func<<#=entityName#>, int?>> selecter, Expression<Func<<#=entityName#>, bool>> predicate)
        {
            return this.Allow(this.Context.<#=this.Pluralize(entityName)#>)<#=isDeleted?".Where(x => !x.IsDeleted)":""#>.Where(predicate).Sum(selecter);
        }

        /// <summary>
        /// 根据条件统计<#=tableComment#>
        /// </summary>
        /// <param name="selecter">统计字段</param>
        /// <param name="predicate">查询条件</param>
        /// <returns>统计值</returns>
        public virtual decimal? Sum<#=entityName#>(Expression<Func<<#=entityName#>, decimal?>> selecter, Expression<Func<<#=entityName#>, bool>> predicate)
        {
            return this.Allow(this.Context.<#=this.Pluralize(entityName)#>)<#=isDeleted?".Where(x => !x.IsDeleted)":""#>.Where(predicate).Sum(selecter);
        }

        /// <summary>
        /// 根据条件查询<#=tableComment#>
        /// </summary>
        /// <param name="predicate">查询条件</param>
        /// <param name="pages">分页信息</param>
        /// <returns><#=tableComment#>集合</returns>
        public virtual List<<#=entityName#>> Query<#=entityName#>(Expression<Func<<#=entityName#>, bool>> predicate, Pages pages = null)
        {
            return Utility.SplitPage(this.Allow(this.Context.<#=this.Pluralize(entityName)#>)<#=isDeleted?".Where(x => !x.IsDeleted)":""#>.Where(predicate), pages).ToList();
        }

        /// <summary>
        /// 根据条件查询<#=tableComment#>
        /// </summary>
        /// <param name="predicate">查询条件</param>
        /// <param name="dynamicPredicate">动态查询条件</param>
        /// <param name="pages">分页信息</param>
        /// <returns><#=tableComment#>集合</returns>
        public virtual List<<#=entityName#>> Query<#=entityName#>(Expression<Func<<#=entityName#>, bool>> predicate, LambdaExpression dynamicPredicate, Pages pages = null)
        {
            return this.QueryModel(predicate, dynamicPredicate, pages).Select(x => x as <#=entityName#>).ToList();
        }
    }
}
<#
    }

    fileManager.Process();
#>
<#+

#>