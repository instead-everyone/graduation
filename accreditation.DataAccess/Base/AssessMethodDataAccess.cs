//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Mooho.Base.Common;
using accreditation.IDataAccess;
using accreditation.Model;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text;

namespace accreditation.DataAccess
{
    /// <summary>
    /// 考核方式数据访问
    /// </summary>
    public partial class AssessMethodDataAccess : DataBase, IAssessMethodDataAccess
    {
        /// <summary>
        /// 新增考核方式
        /// </summary>
        /// <param name="assessMethod">考核方式</param>
        /// <return>考核方式</return>
        public virtual AssessMethod AddAssessMethod(AssessMethod assessMethod)
        {
            AssessMethod entity = this.Create(assessMethod.GetType()) as AssessMethod;
            entity.ID = assessMethod.ID == 0 ? Utility.NewID() : assessMethod.ID;

			Utility.Copy(assessMethod, entity);

            return this.Context.AssessMethods.Add(entity).Entity;
        }

        /// <summary>
        /// 修改考核方式
        /// </summary>
        /// <param name="assessMethod">考核方式</param>
        /// <return>考核方式</return>
        public virtual AssessMethod UpdateAssessMethod(AssessMethod assessMethod)
        {
            AssessMethod entity = this.Context.AssessMethods.Find(assessMethod.ID);

			Utility.Copy(assessMethod, entity);

            return entity;
        }

        /// <summary>
        /// 保存考核方式
        /// </summary>
        /// <param name="assessMethod">考核方式</param>
        /// <return>考核方式</return>
        public virtual AssessMethod SaveAssessMethod(AssessMethod assessMethod)
        {
            AssessMethod entity;

            if (assessMethod.ID != 0)
            {
                entity = this.Context.AssessMethods.Find(assessMethod.ID);
                if (entity != null)
                {
			        Utility.Copy(assessMethod, entity);
                    return entity;
                }
            }

            entity = this.Create(assessMethod.GetType()) as AssessMethod;
            entity.ID = assessMethod.ID == 0 ? Utility.NewID() : assessMethod.ID;

			Utility.Copy(assessMethod, entity);

            return this.Context.AssessMethods.Add(entity).Entity;
        }

        /// <summary>
        /// 删除考核方式
        /// </summary>
        /// <param name="assessMethod">考核方式</param>
        public virtual void RemoveAssessMethod(AssessMethod assessMethod)
        {
            this.Context.AssessMethods.Remove(assessMethod);
        }

        /// <summary>
        /// 根据条件删除考核方式
        /// </summary>
        /// <param name="predicate">查询条件</param>
        public virtual void RemoveAssessMethod(Expression<Func<AssessMethod, bool>> predicate)
        {
            List<AssessMethod> assessMethods = this.QueryAssessMethod(predicate);
            foreach (AssessMethod assessMethod in assessMethods)
            {
                this.RemoveAssessMethod(assessMethod);
            }
        }

        /// <summary>
        /// 获取考核方式
        /// </summary>
        /// <param name="id">唯一编号</param>
        /// <returns>考核方式</returns>
        public virtual AssessMethod GetAssessMethod(long id)
        {
            AssessMethod entity = this.Allow(this.Context.AssessMethods).FirstOrDefault(x => x.ID == id);

            if (entity == null)
            {
                throw new ApplicationException("考核方式不存在");
            }
            else
            {
                return entity;
            }
        }

        /// <summary>
        /// 获取考核方式
        /// </summary>
        /// <param name="id">唯一编号</param>
        /// <param name="defaultEntity">默认值</param>
        /// <returns>考核方式</returns>
        public virtual AssessMethod GetAssessMethodOrDefault(long id, AssessMethod defaultEntity = null)
        {
            return this.Allow(this.Context.AssessMethods).FirstOrDefault(x => x.ID == id) ?? defaultEntity;
        }

        /// <summary>
        /// 根据条件获取考核方式
        /// </summary>
        /// <param name="predicate">查询条件</param>
        /// <returns>考核方式</returns>
        public virtual AssessMethod GetAssessMethod(Expression<Func<AssessMethod, bool>> predicate)
        {
            AssessMethod entity = this.Allow(this.Context.AssessMethods).FirstOrDefault(predicate);

            if (entity == null)
            {
                throw new ApplicationException("考核方式不存在");
            }
            else
            {
                return entity;
            }
        }

        /// <summary>
        /// 根据条件获取考核方式
        /// </summary>
        /// <param name="predicate">查询条件</param>
        /// <param name="defaultEntity">默认值</param>
        /// <returns>考核方式</returns>
        public virtual AssessMethod GetAssessMethodOrDefault(Expression<Func<AssessMethod, bool>> predicate, AssessMethod defaultEntity = null)
        {
            return this.Allow(this.Context.AssessMethods).FirstOrDefault(predicate) ?? defaultEntity;
        }

        /// <summary>
        /// 根据条件获取考核方式数量
        /// </summary>
        /// <param name="predicate">查询条件</param>
        /// <returns>考核方式数量</returns>
        public virtual int CountAssessMethod(Expression<Func<AssessMethod, bool>> predicate)
        {
            return this.Allow(this.Context.AssessMethods).Where(predicate).Count();
        }

        /// <summary>
        /// 根据条件统计考核方式
        /// </summary>
        /// <param name="selecter">统计字段</param>
        /// <param name="predicate">查询条件</param>
        /// <returns>统计值</returns>
        public virtual int? SumAssessMethod(Expression<Func<AssessMethod, int?>> selecter, Expression<Func<AssessMethod, bool>> predicate)
        {
            return this.Allow(this.Context.AssessMethods).Where(predicate).Sum(selecter);
        }

        /// <summary>
        /// 根据条件统计考核方式
        /// </summary>
        /// <param name="selecter">统计字段</param>
        /// <param name="predicate">查询条件</param>
        /// <returns>统计值</returns>
        public virtual decimal? SumAssessMethod(Expression<Func<AssessMethod, decimal?>> selecter, Expression<Func<AssessMethod, bool>> predicate)
        {
            return this.Allow(this.Context.AssessMethods).Where(predicate).Sum(selecter);
        }

        /// <summary>
        /// 根据条件查询考核方式
        /// </summary>
        /// <param name="predicate">查询条件</param>
        /// <param name="pages">分页信息</param>
        /// <returns>考核方式集合</returns>
        public virtual List<AssessMethod> QueryAssessMethod(Expression<Func<AssessMethod, bool>> predicate, Pages pages = null)
        {
            return Utility.SplitPage(this.Allow(this.Context.AssessMethods).Where(predicate), pages).ToList();
        }

        /// <summary>
        /// 根据条件查询考核方式
        /// </summary>
        /// <param name="predicate">查询条件</param>
        /// <param name="dynamicPredicate">动态查询条件</param>
        /// <param name="pages">分页信息</param>
        /// <returns>考核方式集合</returns>
        public virtual List<AssessMethod> QueryAssessMethod(Expression<Func<AssessMethod, bool>> predicate, LambdaExpression dynamicPredicate, Pages pages = null)
        {
            return this.QueryModel(predicate, dynamicPredicate, pages).Select(x => x as AssessMethod).ToList();
        }
    }
}
