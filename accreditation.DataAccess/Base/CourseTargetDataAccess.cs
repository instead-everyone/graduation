//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Mooho.Base.Common;
using accreditation.IDataAccess;
using accreditation.Model;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text;

namespace accreditation.DataAccess
{
    /// <summary>
    /// 课程目标数据访问
    /// </summary>
    public partial class CourseTargetDataAccess : DataBase, ICourseTargetDataAccess
    {
        /// <summary>
        /// 新增课程目标
        /// </summary>
        /// <param name="courseTarget">课程目标</param>
        /// <return>课程目标</return>
        public virtual CourseTarget AddCourseTarget(CourseTarget courseTarget)
        {
            CourseTarget entity = this.Create(courseTarget.GetType()) as CourseTarget;
            entity.ID = courseTarget.ID == 0 ? Utility.NewID() : courseTarget.ID;

			Utility.Copy(courseTarget, entity);

            return this.Context.CourseTargets.Add(entity).Entity;
        }

        /// <summary>
        /// 修改课程目标
        /// </summary>
        /// <param name="courseTarget">课程目标</param>
        /// <return>课程目标</return>
        public virtual CourseTarget UpdateCourseTarget(CourseTarget courseTarget)
        {
            CourseTarget entity = this.Context.CourseTargets.Find(courseTarget.ID);

			Utility.Copy(courseTarget, entity);

            return entity;
        }

        /// <summary>
        /// 保存课程目标
        /// </summary>
        /// <param name="courseTarget">课程目标</param>
        /// <return>课程目标</return>
        public virtual CourseTarget SaveCourseTarget(CourseTarget courseTarget)
        {
            CourseTarget entity;

            if (courseTarget.ID != 0)
            {
                entity = this.Context.CourseTargets.Find(courseTarget.ID);
                if (entity != null)
                {
			        Utility.Copy(courseTarget, entity);
                    return entity;
                }
            }

            entity = this.Create(courseTarget.GetType()) as CourseTarget;
            entity.ID = courseTarget.ID == 0 ? Utility.NewID() : courseTarget.ID;

			Utility.Copy(courseTarget, entity);

            return this.Context.CourseTargets.Add(entity).Entity;
        }

        /// <summary>
        /// 删除课程目标
        /// </summary>
        /// <param name="courseTarget">课程目标</param>
        public virtual void RemoveCourseTarget(CourseTarget courseTarget)
        {
            this.Context.CourseTargets.Remove(courseTarget);
        }

        /// <summary>
        /// 根据条件删除课程目标
        /// </summary>
        /// <param name="predicate">查询条件</param>
        public virtual void RemoveCourseTarget(Expression<Func<CourseTarget, bool>> predicate)
        {
            List<CourseTarget> courseTargets = this.QueryCourseTarget(predicate);
            foreach (CourseTarget courseTarget in courseTargets)
            {
                this.RemoveCourseTarget(courseTarget);
            }
        }

        /// <summary>
        /// 获取课程目标
        /// </summary>
        /// <param name="id">唯一编号</param>
        /// <returns>课程目标</returns>
        public virtual CourseTarget GetCourseTarget(long id)
        {
            CourseTarget entity = this.Allow(this.Context.CourseTargets).FirstOrDefault(x => x.ID == id);

            if (entity == null)
            {
                throw new ApplicationException("课程目标不存在");
            }
            else
            {
                return entity;
            }
        }

        /// <summary>
        /// 获取课程目标
        /// </summary>
        /// <param name="id">唯一编号</param>
        /// <param name="defaultEntity">默认值</param>
        /// <returns>课程目标</returns>
        public virtual CourseTarget GetCourseTargetOrDefault(long id, CourseTarget defaultEntity = null)
        {
            return this.Allow(this.Context.CourseTargets).FirstOrDefault(x => x.ID == id) ?? defaultEntity;
        }

        /// <summary>
        /// 根据条件获取课程目标
        /// </summary>
        /// <param name="predicate">查询条件</param>
        /// <returns>课程目标</returns>
        public virtual CourseTarget GetCourseTarget(Expression<Func<CourseTarget, bool>> predicate)
        {
            CourseTarget entity = this.Allow(this.Context.CourseTargets).FirstOrDefault(predicate);

            if (entity == null)
            {
                throw new ApplicationException("课程目标不存在");
            }
            else
            {
                return entity;
            }
        }

        /// <summary>
        /// 根据条件获取课程目标
        /// </summary>
        /// <param name="predicate">查询条件</param>
        /// <param name="defaultEntity">默认值</param>
        /// <returns>课程目标</returns>
        public virtual CourseTarget GetCourseTargetOrDefault(Expression<Func<CourseTarget, bool>> predicate, CourseTarget defaultEntity = null)
        {
            return this.Allow(this.Context.CourseTargets).FirstOrDefault(predicate) ?? defaultEntity;
        }

        /// <summary>
        /// 根据条件获取课程目标数量
        /// </summary>
        /// <param name="predicate">查询条件</param>
        /// <returns>课程目标数量</returns>
        public virtual int CountCourseTarget(Expression<Func<CourseTarget, bool>> predicate)
        {
            return this.Allow(this.Context.CourseTargets).Where(predicate).Count();
        }

        /// <summary>
        /// 根据条件统计课程目标
        /// </summary>
        /// <param name="selecter">统计字段</param>
        /// <param name="predicate">查询条件</param>
        /// <returns>统计值</returns>
        public virtual int? SumCourseTarget(Expression<Func<CourseTarget, int?>> selecter, Expression<Func<CourseTarget, bool>> predicate)
        {
            return this.Allow(this.Context.CourseTargets).Where(predicate).Sum(selecter);
        }

        /// <summary>
        /// 根据条件统计课程目标
        /// </summary>
        /// <param name="selecter">统计字段</param>
        /// <param name="predicate">查询条件</param>
        /// <returns>统计值</returns>
        public virtual decimal? SumCourseTarget(Expression<Func<CourseTarget, decimal?>> selecter, Expression<Func<CourseTarget, bool>> predicate)
        {
            return this.Allow(this.Context.CourseTargets).Where(predicate).Sum(selecter);
        }

        /// <summary>
        /// 根据条件查询课程目标
        /// </summary>
        /// <param name="predicate">查询条件</param>
        /// <param name="pages">分页信息</param>
        /// <returns>课程目标集合</returns>
        public virtual List<CourseTarget> QueryCourseTarget(Expression<Func<CourseTarget, bool>> predicate, Pages pages = null)
        {
            return Utility.SplitPage(this.Allow(this.Context.CourseTargets).Where(predicate), pages).ToList();
        }

        /// <summary>
        /// 根据条件查询课程目标
        /// </summary>
        /// <param name="predicate">查询条件</param>
        /// <param name="dynamicPredicate">动态查询条件</param>
        /// <param name="pages">分页信息</param>
        /// <returns>课程目标集合</returns>
        public virtual List<CourseTarget> QueryCourseTarget(Expression<Func<CourseTarget, bool>> predicate, LambdaExpression dynamicPredicate, Pages pages = null)
        {
            return this.QueryModel(predicate, dynamicPredicate, pages).Select(x => x as CourseTarget).ToList();
        }
    }
}
