//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Mooho.Base.Common;
using accreditation.IDataAccess;
using accreditation.Model;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text;

namespace accreditation.DataAccess
{
    /// <summary>
    /// 考核分解项数据访问
    /// </summary>
    public partial class AssessFragmentDataAccess : DataBase, IAssessFragmentDataAccess
    {
        /// <summary>
        /// 新增考核分解项
        /// </summary>
        /// <param name="assessFragment">考核分解项</param>
        /// <return>考核分解项</return>
        public virtual AssessFragment AddAssessFragment(AssessFragment assessFragment)
        {
            AssessFragment entity = this.Create(assessFragment.GetType()) as AssessFragment;
            entity.ID = assessFragment.ID == 0 ? Utility.NewID() : assessFragment.ID;

			Utility.Copy(assessFragment, entity);

            return this.Context.AssessFragments.Add(entity).Entity;
        }

        /// <summary>
        /// 修改考核分解项
        /// </summary>
        /// <param name="assessFragment">考核分解项</param>
        /// <return>考核分解项</return>
        public virtual AssessFragment UpdateAssessFragment(AssessFragment assessFragment)
        {
            AssessFragment entity = this.Context.AssessFragments.Find(assessFragment.ID);

			Utility.Copy(assessFragment, entity);

            return entity;
        }

        /// <summary>
        /// 保存考核分解项
        /// </summary>
        /// <param name="assessFragment">考核分解项</param>
        /// <return>考核分解项</return>
        public virtual AssessFragment SaveAssessFragment(AssessFragment assessFragment)
        {
            AssessFragment entity;

            if (assessFragment.ID != 0)
            {
                entity = this.Context.AssessFragments.Find(assessFragment.ID);
                if (entity != null)
                {
			        Utility.Copy(assessFragment, entity);
                    return entity;
                }
            }

            entity = this.Create(assessFragment.GetType()) as AssessFragment;
            entity.ID = assessFragment.ID == 0 ? Utility.NewID() : assessFragment.ID;

			Utility.Copy(assessFragment, entity);

            return this.Context.AssessFragments.Add(entity).Entity;
        }

        /// <summary>
        /// 删除考核分解项
        /// </summary>
        /// <param name="assessFragment">考核分解项</param>
        public virtual void RemoveAssessFragment(AssessFragment assessFragment)
        {
            this.Context.AssessFragments.Remove(assessFragment);
        }

        /// <summary>
        /// 根据条件删除考核分解项
        /// </summary>
        /// <param name="predicate">查询条件</param>
        public virtual void RemoveAssessFragment(Expression<Func<AssessFragment, bool>> predicate)
        {
            List<AssessFragment> assessFragments = this.QueryAssessFragment(predicate);
            foreach (AssessFragment assessFragment in assessFragments)
            {
                this.RemoveAssessFragment(assessFragment);
            }
        }

        /// <summary>
        /// 获取考核分解项
        /// </summary>
        /// <param name="id">唯一编号</param>
        /// <returns>考核分解项</returns>
        public virtual AssessFragment GetAssessFragment(long id)
        {
            AssessFragment entity = this.Allow(this.Context.AssessFragments).FirstOrDefault(x => x.ID == id);

            if (entity == null)
            {
                throw new ApplicationException("考核分解项不存在");
            }
            else
            {
                return entity;
            }
        }

        /// <summary>
        /// 获取考核分解项
        /// </summary>
        /// <param name="id">唯一编号</param>
        /// <param name="defaultEntity">默认值</param>
        /// <returns>考核分解项</returns>
        public virtual AssessFragment GetAssessFragmentOrDefault(long id, AssessFragment defaultEntity = null)
        {
            return this.Allow(this.Context.AssessFragments).FirstOrDefault(x => x.ID == id) ?? defaultEntity;
        }

        /// <summary>
        /// 根据条件获取考核分解项
        /// </summary>
        /// <param name="predicate">查询条件</param>
        /// <returns>考核分解项</returns>
        public virtual AssessFragment GetAssessFragment(Expression<Func<AssessFragment, bool>> predicate)
        {
            AssessFragment entity = this.Allow(this.Context.AssessFragments).FirstOrDefault(predicate);

            if (entity == null)
            {
                throw new ApplicationException("考核分解项不存在");
            }
            else
            {
                return entity;
            }
        }

        /// <summary>
        /// 根据条件获取考核分解项
        /// </summary>
        /// <param name="predicate">查询条件</param>
        /// <param name="defaultEntity">默认值</param>
        /// <returns>考核分解项</returns>
        public virtual AssessFragment GetAssessFragmentOrDefault(Expression<Func<AssessFragment, bool>> predicate, AssessFragment defaultEntity = null)
        {
            return this.Allow(this.Context.AssessFragments).FirstOrDefault(predicate) ?? defaultEntity;
        }

        /// <summary>
        /// 根据条件获取考核分解项数量
        /// </summary>
        /// <param name="predicate">查询条件</param>
        /// <returns>考核分解项数量</returns>
        public virtual int CountAssessFragment(Expression<Func<AssessFragment, bool>> predicate)
        {
            return this.Allow(this.Context.AssessFragments).Where(predicate).Count();
        }

        /// <summary>
        /// 根据条件统计考核分解项
        /// </summary>
        /// <param name="selecter">统计字段</param>
        /// <param name="predicate">查询条件</param>
        /// <returns>统计值</returns>
        public virtual int? SumAssessFragment(Expression<Func<AssessFragment, int?>> selecter, Expression<Func<AssessFragment, bool>> predicate)
        {
            return this.Allow(this.Context.AssessFragments).Where(predicate).Sum(selecter);
        }

        /// <summary>
        /// 根据条件统计考核分解项
        /// </summary>
        /// <param name="selecter">统计字段</param>
        /// <param name="predicate">查询条件</param>
        /// <returns>统计值</returns>
        public virtual decimal? SumAssessFragment(Expression<Func<AssessFragment, decimal?>> selecter, Expression<Func<AssessFragment, bool>> predicate)
        {
            return this.Allow(this.Context.AssessFragments).Where(predicate).Sum(selecter);
        }

        /// <summary>
        /// 根据条件查询考核分解项
        /// </summary>
        /// <param name="predicate">查询条件</param>
        /// <param name="pages">分页信息</param>
        /// <returns>考核分解项集合</returns>
        public virtual List<AssessFragment> QueryAssessFragment(Expression<Func<AssessFragment, bool>> predicate, Pages pages = null)
        {
            return Utility.SplitPage(this.Allow(this.Context.AssessFragments).Where(predicate), pages).ToList();
        }

        /// <summary>
        /// 根据条件查询考核分解项
        /// </summary>
        /// <param name="predicate">查询条件</param>
        /// <param name="dynamicPredicate">动态查询条件</param>
        /// <param name="pages">分页信息</param>
        /// <returns>考核分解项集合</returns>
        public virtual List<AssessFragment> QueryAssessFragment(Expression<Func<AssessFragment, bool>> predicate, LambdaExpression dynamicPredicate, Pages pages = null)
        {
            return this.QueryModel(predicate, dynamicPredicate, pages).Select(x => x as AssessFragment).ToList();
        }
    }
}
