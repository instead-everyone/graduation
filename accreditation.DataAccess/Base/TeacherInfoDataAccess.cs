//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Mooho.Base.Common;
using accreditation.IDataAccess;
using accreditation.Model;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text;

namespace accreditation.DataAccess
{
    /// <summary>
    /// 教师信息数据访问
    /// </summary>
    public partial class TeacherInfoDataAccess : DataBase, ITeacherInfoDataAccess
    {
        /// <summary>
        /// 新增教师信息
        /// </summary>
        /// <param name="teacherInfo">教师信息</param>
        /// <return>教师信息</return>
        public virtual TeacherInfo AddTeacherInfo(TeacherInfo teacherInfo)
        {
            TeacherInfo entity = this.Create(teacherInfo.GetType()) as TeacherInfo;
            entity.ID = teacherInfo.ID == 0 ? Utility.NewID() : teacherInfo.ID;

			Utility.Copy(teacherInfo, entity);

            return this.Context.TeacherInfoes.Add(entity).Entity;
        }

        /// <summary>
        /// 修改教师信息
        /// </summary>
        /// <param name="teacherInfo">教师信息</param>
        /// <return>教师信息</return>
        public virtual TeacherInfo UpdateTeacherInfo(TeacherInfo teacherInfo)
        {
            TeacherInfo entity = this.Context.TeacherInfoes.Find(teacherInfo.ID);

			Utility.Copy(teacherInfo, entity);

            return entity;
        }

        /// <summary>
        /// 保存教师信息
        /// </summary>
        /// <param name="teacherInfo">教师信息</param>
        /// <return>教师信息</return>
        public virtual TeacherInfo SaveTeacherInfo(TeacherInfo teacherInfo)
        {
            TeacherInfo entity;

            if (teacherInfo.ID != 0)
            {
                entity = this.Context.TeacherInfoes.Find(teacherInfo.ID);
                if (entity != null)
                {
			        Utility.Copy(teacherInfo, entity);
                    return entity;
                }
            }

            entity = this.Create(teacherInfo.GetType()) as TeacherInfo;
            entity.ID = teacherInfo.ID == 0 ? Utility.NewID() : teacherInfo.ID;

			Utility.Copy(teacherInfo, entity);

            return this.Context.TeacherInfoes.Add(entity).Entity;
        }

        /// <summary>
        /// 删除教师信息
        /// </summary>
        /// <param name="teacherInfo">教师信息</param>
        public virtual void RemoveTeacherInfo(TeacherInfo teacherInfo)
        {
            this.Context.TeacherInfoes.Remove(teacherInfo);
        }

        /// <summary>
        /// 根据条件删除教师信息
        /// </summary>
        /// <param name="predicate">查询条件</param>
        public virtual void RemoveTeacherInfo(Expression<Func<TeacherInfo, bool>> predicate)
        {
            List<TeacherInfo> teacherInfoes = this.QueryTeacherInfo(predicate);
            foreach (TeacherInfo teacherInfo in teacherInfoes)
            {
                this.RemoveTeacherInfo(teacherInfo);
            }
        }

        /// <summary>
        /// 获取教师信息
        /// </summary>
        /// <param name="id">唯一编号</param>
        /// <returns>教师信息</returns>
        public virtual TeacherInfo GetTeacherInfo(long id)
        {
            TeacherInfo entity = this.Allow(this.Context.TeacherInfoes).FirstOrDefault(x => x.ID == id);

            if (entity == null)
            {
                throw new ApplicationException("教师信息不存在");
            }
            else
            {
                return entity;
            }
        }

        /// <summary>
        /// 获取教师信息
        /// </summary>
        /// <param name="id">唯一编号</param>
        /// <param name="defaultEntity">默认值</param>
        /// <returns>教师信息</returns>
        public virtual TeacherInfo GetTeacherInfoOrDefault(long id, TeacherInfo defaultEntity = null)
        {
            return this.Allow(this.Context.TeacherInfoes).FirstOrDefault(x => x.ID == id) ?? defaultEntity;
        }

        /// <summary>
        /// 根据条件获取教师信息
        /// </summary>
        /// <param name="predicate">查询条件</param>
        /// <returns>教师信息</returns>
        public virtual TeacherInfo GetTeacherInfo(Expression<Func<TeacherInfo, bool>> predicate)
        {
            TeacherInfo entity = this.Allow(this.Context.TeacherInfoes).FirstOrDefault(predicate);

            if (entity == null)
            {
                throw new ApplicationException("教师信息不存在");
            }
            else
            {
                return entity;
            }
        }

        /// <summary>
        /// 根据条件获取教师信息
        /// </summary>
        /// <param name="predicate">查询条件</param>
        /// <param name="defaultEntity">默认值</param>
        /// <returns>教师信息</returns>
        public virtual TeacherInfo GetTeacherInfoOrDefault(Expression<Func<TeacherInfo, bool>> predicate, TeacherInfo defaultEntity = null)
        {
            return this.Allow(this.Context.TeacherInfoes).FirstOrDefault(predicate) ?? defaultEntity;
        }

        /// <summary>
        /// 根据条件获取教师信息数量
        /// </summary>
        /// <param name="predicate">查询条件</param>
        /// <returns>教师信息数量</returns>
        public virtual int CountTeacherInfo(Expression<Func<TeacherInfo, bool>> predicate)
        {
            return this.Allow(this.Context.TeacherInfoes).Where(predicate).Count();
        }

        /// <summary>
        /// 根据条件统计教师信息
        /// </summary>
        /// <param name="selecter">统计字段</param>
        /// <param name="predicate">查询条件</param>
        /// <returns>统计值</returns>
        public virtual int? SumTeacherInfo(Expression<Func<TeacherInfo, int?>> selecter, Expression<Func<TeacherInfo, bool>> predicate)
        {
            return this.Allow(this.Context.TeacherInfoes).Where(predicate).Sum(selecter);
        }

        /// <summary>
        /// 根据条件统计教师信息
        /// </summary>
        /// <param name="selecter">统计字段</param>
        /// <param name="predicate">查询条件</param>
        /// <returns>统计值</returns>
        public virtual decimal? SumTeacherInfo(Expression<Func<TeacherInfo, decimal?>> selecter, Expression<Func<TeacherInfo, bool>> predicate)
        {
            return this.Allow(this.Context.TeacherInfoes).Where(predicate).Sum(selecter);
        }

        /// <summary>
        /// 根据条件查询教师信息
        /// </summary>
        /// <param name="predicate">查询条件</param>
        /// <param name="pages">分页信息</param>
        /// <returns>教师信息集合</returns>
        public virtual List<TeacherInfo> QueryTeacherInfo(Expression<Func<TeacherInfo, bool>> predicate, Pages pages = null)
        {
            return Utility.SplitPage(this.Allow(this.Context.TeacherInfoes).Where(predicate), pages).ToList();
        }

        /// <summary>
        /// 根据条件查询教师信息
        /// </summary>
        /// <param name="predicate">查询条件</param>
        /// <param name="dynamicPredicate">动态查询条件</param>
        /// <param name="pages">分页信息</param>
        /// <returns>教师信息集合</returns>
        public virtual List<TeacherInfo> QueryTeacherInfo(Expression<Func<TeacherInfo, bool>> predicate, LambdaExpression dynamicPredicate, Pages pages = null)
        {
            return this.QueryModel(predicate, dynamicPredicate, pages).Select(x => x as TeacherInfo).ToList();
        }
    }
}
