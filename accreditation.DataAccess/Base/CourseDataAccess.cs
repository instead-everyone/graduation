//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Mooho.Base.Common;
using accreditation.IDataAccess;
using accreditation.Model;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text;

namespace accreditation.DataAccess
{
    /// <summary>
    /// 课程数据访问
    /// </summary>
    public partial class CourseDataAccess : DataBase, ICourseDataAccess
    {
        /// <summary>
        /// 新增课程
        /// </summary>
        /// <param name="course">课程</param>
        /// <return>课程</return>
        public virtual Course AddCourse(Course course)
        {
            Course entity = this.Create(course.GetType()) as Course;
            entity.ID = course.ID == 0 ? Utility.NewID() : course.ID;

			Utility.Copy(course, entity);

            return this.Context.Courses.Add(entity).Entity;
        }

        /// <summary>
        /// 修改课程
        /// </summary>
        /// <param name="course">课程</param>
        /// <return>课程</return>
        public virtual Course UpdateCourse(Course course)
        {
            Course entity = this.Context.Courses.Find(course.ID);

			Utility.Copy(course, entity);

            return entity;
        }

        /// <summary>
        /// 保存课程
        /// </summary>
        /// <param name="course">课程</param>
        /// <return>课程</return>
        public virtual Course SaveCourse(Course course)
        {
            Course entity;

            if (course.ID != 0)
            {
                entity = this.Context.Courses.Find(course.ID);
                if (entity != null)
                {
			        Utility.Copy(course, entity);
                    return entity;
                }
            }

            entity = this.Create(course.GetType()) as Course;
            entity.ID = course.ID == 0 ? Utility.NewID() : course.ID;

			Utility.Copy(course, entity);

            return this.Context.Courses.Add(entity).Entity;
        }

        /// <summary>
        /// 删除课程
        /// </summary>
        /// <param name="course">课程</param>
        public virtual void RemoveCourse(Course course)
        {
            this.Context.Courses.Remove(course);
        }

        /// <summary>
        /// 根据条件删除课程
        /// </summary>
        /// <param name="predicate">查询条件</param>
        public virtual void RemoveCourse(Expression<Func<Course, bool>> predicate)
        {
            List<Course> courses = this.QueryCourse(predicate);
            foreach (Course course in courses)
            {
                this.RemoveCourse(course);
            }
        }

        /// <summary>
        /// 获取课程
        /// </summary>
        /// <param name="id">唯一编号</param>
        /// <returns>课程</returns>
        public virtual Course GetCourse(long id)
        {
            Course entity = this.Allow(this.Context.Courses).FirstOrDefault(x => x.ID == id);

            if (entity == null)
            {
                throw new ApplicationException("课程不存在");
            }
            else
            {
                return entity;
            }
        }

        /// <summary>
        /// 获取课程
        /// </summary>
        /// <param name="id">唯一编号</param>
        /// <param name="defaultEntity">默认值</param>
        /// <returns>课程</returns>
        public virtual Course GetCourseOrDefault(long id, Course defaultEntity = null)
        {
            return this.Allow(this.Context.Courses).FirstOrDefault(x => x.ID == id) ?? defaultEntity;
        }

        /// <summary>
        /// 根据条件获取课程
        /// </summary>
        /// <param name="predicate">查询条件</param>
        /// <returns>课程</returns>
        public virtual Course GetCourse(Expression<Func<Course, bool>> predicate)
        {
            Course entity = this.Allow(this.Context.Courses).FirstOrDefault(predicate);

            if (entity == null)
            {
                throw new ApplicationException("课程不存在");
            }
            else
            {
                return entity;
            }
        }

        /// <summary>
        /// 根据条件获取课程
        /// </summary>
        /// <param name="predicate">查询条件</param>
        /// <param name="defaultEntity">默认值</param>
        /// <returns>课程</returns>
        public virtual Course GetCourseOrDefault(Expression<Func<Course, bool>> predicate, Course defaultEntity = null)
        {
            return this.Allow(this.Context.Courses).FirstOrDefault(predicate) ?? defaultEntity;
        }

        /// <summary>
        /// 根据条件获取课程数量
        /// </summary>
        /// <param name="predicate">查询条件</param>
        /// <returns>课程数量</returns>
        public virtual int CountCourse(Expression<Func<Course, bool>> predicate)
        {
            return this.Allow(this.Context.Courses).Where(predicate).Count();
        }

        /// <summary>
        /// 根据条件统计课程
        /// </summary>
        /// <param name="selecter">统计字段</param>
        /// <param name="predicate">查询条件</param>
        /// <returns>统计值</returns>
        public virtual int? SumCourse(Expression<Func<Course, int?>> selecter, Expression<Func<Course, bool>> predicate)
        {
            return this.Allow(this.Context.Courses).Where(predicate).Sum(selecter);
        }

        /// <summary>
        /// 根据条件统计课程
        /// </summary>
        /// <param name="selecter">统计字段</param>
        /// <param name="predicate">查询条件</param>
        /// <returns>统计值</returns>
        public virtual decimal? SumCourse(Expression<Func<Course, decimal?>> selecter, Expression<Func<Course, bool>> predicate)
        {
            return this.Allow(this.Context.Courses).Where(predicate).Sum(selecter);
        }

        /// <summary>
        /// 根据条件查询课程
        /// </summary>
        /// <param name="predicate">查询条件</param>
        /// <param name="pages">分页信息</param>
        /// <returns>课程集合</returns>
        public virtual List<Course> QueryCourse(Expression<Func<Course, bool>> predicate, Pages pages = null)
        {
            return Utility.SplitPage(this.Allow(this.Context.Courses).Where(predicate), pages).ToList();
        }

        /// <summary>
        /// 根据条件查询课程
        /// </summary>
        /// <param name="predicate">查询条件</param>
        /// <param name="dynamicPredicate">动态查询条件</param>
        /// <param name="pages">分页信息</param>
        /// <returns>课程集合</returns>
        public virtual List<Course> QueryCourse(Expression<Func<Course, bool>> predicate, LambdaExpression dynamicPredicate, Pages pages = null)
        {
            return this.QueryModel(predicate, dynamicPredicate, pages).Select(x => x as Course).ToList();
        }
    }
}
