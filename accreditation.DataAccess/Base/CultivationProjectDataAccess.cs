//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Mooho.Base.Common;
using accreditation.IDataAccess;
using accreditation.Model;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text;

namespace accreditation.DataAccess
{
    /// <summary>
    /// 培养计划数据访问
    /// </summary>
    public partial class CultivationProjectDataAccess : DataBase, ICultivationProjectDataAccess
    {
        /// <summary>
        /// 新增培养计划
        /// </summary>
        /// <param name="cultivationProject">培养计划</param>
        /// <return>培养计划</return>
        public virtual CultivationProject AddCultivationProject(CultivationProject cultivationProject)
        {
            CultivationProject entity = this.Create(cultivationProject.GetType()) as CultivationProject;
            entity.ID = cultivationProject.ID == 0 ? Utility.NewID() : cultivationProject.ID;

			Utility.Copy(cultivationProject, entity);

            return this.Context.CultivationProjects.Add(entity).Entity;
        }

        /// <summary>
        /// 修改培养计划
        /// </summary>
        /// <param name="cultivationProject">培养计划</param>
        /// <return>培养计划</return>
        public virtual CultivationProject UpdateCultivationProject(CultivationProject cultivationProject)
        {
            CultivationProject entity = this.Context.CultivationProjects.Find(cultivationProject.ID);

			Utility.Copy(cultivationProject, entity);

            return entity;
        }

        /// <summary>
        /// 保存培养计划
        /// </summary>
        /// <param name="cultivationProject">培养计划</param>
        /// <return>培养计划</return>
        public virtual CultivationProject SaveCultivationProject(CultivationProject cultivationProject)
        {
            CultivationProject entity;

            if (cultivationProject.ID != 0)
            {
                entity = this.Context.CultivationProjects.Find(cultivationProject.ID);
                if (entity != null)
                {
			        Utility.Copy(cultivationProject, entity);
                    return entity;
                }
            }

            entity = this.Create(cultivationProject.GetType()) as CultivationProject;
            entity.ID = cultivationProject.ID == 0 ? Utility.NewID() : cultivationProject.ID;

			Utility.Copy(cultivationProject, entity);

            return this.Context.CultivationProjects.Add(entity).Entity;
        }

        /// <summary>
        /// 删除培养计划
        /// </summary>
        /// <param name="cultivationProject">培养计划</param>
        public virtual void RemoveCultivationProject(CultivationProject cultivationProject)
        {
            this.Context.CultivationProjects.Remove(cultivationProject);
        }

        /// <summary>
        /// 根据条件删除培养计划
        /// </summary>
        /// <param name="predicate">查询条件</param>
        public virtual void RemoveCultivationProject(Expression<Func<CultivationProject, bool>> predicate)
        {
            List<CultivationProject> cultivationProjects = this.QueryCultivationProject(predicate);
            foreach (CultivationProject cultivationProject in cultivationProjects)
            {
                this.RemoveCultivationProject(cultivationProject);
            }
        }

        /// <summary>
        /// 获取培养计划
        /// </summary>
        /// <param name="id">唯一编号</param>
        /// <returns>培养计划</returns>
        public virtual CultivationProject GetCultivationProject(long id)
        {
            CultivationProject entity = this.Allow(this.Context.CultivationProjects).FirstOrDefault(x => x.ID == id);

            if (entity == null)
            {
                throw new ApplicationException("培养计划不存在");
            }
            else
            {
                return entity;
            }
        }

        /// <summary>
        /// 获取培养计划
        /// </summary>
        /// <param name="id">唯一编号</param>
        /// <param name="defaultEntity">默认值</param>
        /// <returns>培养计划</returns>
        public virtual CultivationProject GetCultivationProjectOrDefault(long id, CultivationProject defaultEntity = null)
        {
            return this.Allow(this.Context.CultivationProjects).FirstOrDefault(x => x.ID == id) ?? defaultEntity;
        }

        /// <summary>
        /// 根据条件获取培养计划
        /// </summary>
        /// <param name="predicate">查询条件</param>
        /// <returns>培养计划</returns>
        public virtual CultivationProject GetCultivationProject(Expression<Func<CultivationProject, bool>> predicate)
        {
            CultivationProject entity = this.Allow(this.Context.CultivationProjects).FirstOrDefault(predicate);

            if (entity == null)
            {
                throw new ApplicationException("培养计划不存在");
            }
            else
            {
                return entity;
            }
        }

        /// <summary>
        /// 根据条件获取培养计划
        /// </summary>
        /// <param name="predicate">查询条件</param>
        /// <param name="defaultEntity">默认值</param>
        /// <returns>培养计划</returns>
        public virtual CultivationProject GetCultivationProjectOrDefault(Expression<Func<CultivationProject, bool>> predicate, CultivationProject defaultEntity = null)
        {
            return this.Allow(this.Context.CultivationProjects).FirstOrDefault(predicate) ?? defaultEntity;
        }

        /// <summary>
        /// 根据条件获取培养计划数量
        /// </summary>
        /// <param name="predicate">查询条件</param>
        /// <returns>培养计划数量</returns>
        public virtual int CountCultivationProject(Expression<Func<CultivationProject, bool>> predicate)
        {
            return this.Allow(this.Context.CultivationProjects).Where(predicate).Count();
        }

        /// <summary>
        /// 根据条件统计培养计划
        /// </summary>
        /// <param name="selecter">统计字段</param>
        /// <param name="predicate">查询条件</param>
        /// <returns>统计值</returns>
        public virtual int? SumCultivationProject(Expression<Func<CultivationProject, int?>> selecter, Expression<Func<CultivationProject, bool>> predicate)
        {
            return this.Allow(this.Context.CultivationProjects).Where(predicate).Sum(selecter);
        }

        /// <summary>
        /// 根据条件统计培养计划
        /// </summary>
        /// <param name="selecter">统计字段</param>
        /// <param name="predicate">查询条件</param>
        /// <returns>统计值</returns>
        public virtual decimal? SumCultivationProject(Expression<Func<CultivationProject, decimal?>> selecter, Expression<Func<CultivationProject, bool>> predicate)
        {
            return this.Allow(this.Context.CultivationProjects).Where(predicate).Sum(selecter);
        }

        /// <summary>
        /// 根据条件查询培养计划
        /// </summary>
        /// <param name="predicate">查询条件</param>
        /// <param name="pages">分页信息</param>
        /// <returns>培养计划集合</returns>
        public virtual List<CultivationProject> QueryCultivationProject(Expression<Func<CultivationProject, bool>> predicate, Pages pages = null)
        {
            return Utility.SplitPage(this.Allow(this.Context.CultivationProjects).Where(predicate), pages).ToList();
        }

        /// <summary>
        /// 根据条件查询培养计划
        /// </summary>
        /// <param name="predicate">查询条件</param>
        /// <param name="dynamicPredicate">动态查询条件</param>
        /// <param name="pages">分页信息</param>
        /// <returns>培养计划集合</returns>
        public virtual List<CultivationProject> QueryCultivationProject(Expression<Func<CultivationProject, bool>> predicate, LambdaExpression dynamicPredicate, Pages pages = null)
        {
            return this.QueryModel(predicate, dynamicPredicate, pages).Select(x => x as CultivationProject).ToList();
        }
    }
}
