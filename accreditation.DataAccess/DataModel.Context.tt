<#@ template language="C#" debug="false" hostspecific="true"#><#@ include file="../CodeGeneration/common.ttinclude"#><#@ include file="../CodeGeneration/config.ttinclude"#><#@ output extension=".cs"#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Microsoft.EntityFrameworkCore;
using <#=namespaceName#><#=subName#>.DataAccess;
using <#=namespaceName#><#=subName#>.Model;
using Mooho.Base.Common;
using System;
using System.Linq;

namespace <#=namespaceName#><#=subName#>.DataAccess
{
    public partial class <#=entitiesName#>
    {
<#

    // 项目根目录
    string projectPath = Host.ResolveAssemblyReference("$(ProjectDir)");
    // 用户根目录
    string userPath = Directory.GetParent(Directory.GetParent(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData)).FullName).FullName;

    XDocument prjDoc = XDocument.Load(projectPath + namespaceName + subName + ".DataAccess.csproj");
    var node = prjDoc.Element("Project").Elements().SelectMany(x => x.Elements("PackageReference")).FirstOrDefault(x => x.Attribute("Include").Value == "Mooho.Base");
    string version = node.Attribute("Version").Value;

    // Mooho.Base.Common目录
    XDocument commonDoc = XDocument.Load(userPath + "\\.nuget\\packages\\mooho.base\\" + version + "\\lib\\net5.0\\Mooho.Base.Common.xml");
    // Mooho.Base.Model目录
    XDocument modelDoc = XDocument.Load(userPath + "\\.nuget\\packages\\mooho.base\\" + version + "\\lib\\net5.0\\Mooho.Base.Model.xml");

    CodeGenerationTools code = new CodeGenerationTools(this);

    var fileManager = EntityFrameworkTemplateFileManager.Create(this);

    // 获取表信息
	DataSet tableSet = this.GetTableData();

	foreach (DataRow tableRow in tableSet.Tables[0].Rows)
    {
        string tableName = tableRow["TABLE_NAME"].ToString().Trim();
        string tableComment = tableRow["TABLE_COMMENT"].ToString().Trim();
        string entityName = this.GetEntityName(tableName);

        bool isExt = Convert.ToInt32(tableRow["TABLE_ISEXT"]) == 1;

        if (this.IsModelExist(commonDoc, entityName) || this.IsModelExist(modelDoc, entityName))
        {
            // 基础表
            continue;
        }

        if (tableComment.Contains("-b") || tableComment.Contains("-p"))
        {
            continue;
        }
#>
		/// <summary>
        /// 获取或设置<#=tableComment#>
        /// </summary>
        public virtual DbSet<<#=entityName#>> <#=this.Pluralize(entityName)#> { get; set; }

<#
    }

#>
        /// <summary>
        /// 模型创建
        /// </summary>
        /// <param name="modelBuilder">模型生成器</param>
        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);
<#
    foreach (DataRow tableRow in tableSet.Tables[0].Rows)
    {
        string tableName = tableRow["TABLE_NAME"].ToString().Trim();
        string entityName = this.GetEntityName(tableName);
        bool isExt = Convert.ToInt32(tableRow["TABLE_ISEXT"]) == 1;

        if (isExt)
        { 
#>

            modelBuilder.Entity<Mooho.Base.Model.<#=entityName#>>()
                .HasDiscriminator<int>("ext")
                .HasValue<Mooho.Base.Model.<#=entityName#>>(1)
                .HasValue<<#=entityName#>>(0);
<#
        }
    }
#>
        }
    }
}
<#
    fileManager.Process();
#>
<#+

#>