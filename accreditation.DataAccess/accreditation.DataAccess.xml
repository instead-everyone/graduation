<?xml version="1.0"?>
<doc>
    <assembly>
        <name>accreditation.DataAccess</name>
    </assembly>
    <members>
        <member name="T:accreditation.DataAccess.AssessFragmentDataAccess">
            <summary>
            考核分解项数据访问
            </summary>
        </member>
        <member name="M:accreditation.DataAccess.AssessFragmentDataAccess.AddAssessFragment(accreditation.Model.AssessFragment)">
            <summary>
            新增考核分解项
            </summary>
            <param name="assessFragment">考核分解项</param>
            <return>考核分解项</return>
        </member>
        <member name="M:accreditation.DataAccess.AssessFragmentDataAccess.UpdateAssessFragment(accreditation.Model.AssessFragment)">
            <summary>
            修改考核分解项
            </summary>
            <param name="assessFragment">考核分解项</param>
            <return>考核分解项</return>
        </member>
        <member name="M:accreditation.DataAccess.AssessFragmentDataAccess.SaveAssessFragment(accreditation.Model.AssessFragment)">
            <summary>
            保存考核分解项
            </summary>
            <param name="assessFragment">考核分解项</param>
            <return>考核分解项</return>
        </member>
        <member name="M:accreditation.DataAccess.AssessFragmentDataAccess.RemoveAssessFragment(accreditation.Model.AssessFragment)">
            <summary>
            删除考核分解项
            </summary>
            <param name="assessFragment">考核分解项</param>
        </member>
        <member name="M:accreditation.DataAccess.AssessFragmentDataAccess.RemoveAssessFragment(System.Linq.Expressions.Expression{System.Func{accreditation.Model.AssessFragment,System.Boolean}})">
            <summary>
            根据条件删除考核分解项
            </summary>
            <param name="predicate">查询条件</param>
        </member>
        <member name="M:accreditation.DataAccess.AssessFragmentDataAccess.GetAssessFragment(System.Int64)">
            <summary>
            获取考核分解项
            </summary>
            <param name="id">唯一编号</param>
            <returns>考核分解项</returns>
        </member>
        <member name="M:accreditation.DataAccess.AssessFragmentDataAccess.GetAssessFragmentOrDefault(System.Int64,accreditation.Model.AssessFragment)">
            <summary>
            获取考核分解项
            </summary>
            <param name="id">唯一编号</param>
            <param name="defaultEntity">默认值</param>
            <returns>考核分解项</returns>
        </member>
        <member name="M:accreditation.DataAccess.AssessFragmentDataAccess.GetAssessFragment(System.Linq.Expressions.Expression{System.Func{accreditation.Model.AssessFragment,System.Boolean}})">
            <summary>
            根据条件获取考核分解项
            </summary>
            <param name="predicate">查询条件</param>
            <returns>考核分解项</returns>
        </member>
        <member name="M:accreditation.DataAccess.AssessFragmentDataAccess.GetAssessFragmentOrDefault(System.Linq.Expressions.Expression{System.Func{accreditation.Model.AssessFragment,System.Boolean}},accreditation.Model.AssessFragment)">
            <summary>
            根据条件获取考核分解项
            </summary>
            <param name="predicate">查询条件</param>
            <param name="defaultEntity">默认值</param>
            <returns>考核分解项</returns>
        </member>
        <member name="M:accreditation.DataAccess.AssessFragmentDataAccess.CountAssessFragment(System.Linq.Expressions.Expression{System.Func{accreditation.Model.AssessFragment,System.Boolean}})">
            <summary>
            根据条件获取考核分解项数量
            </summary>
            <param name="predicate">查询条件</param>
            <returns>考核分解项数量</returns>
        </member>
        <member name="M:accreditation.DataAccess.AssessFragmentDataAccess.SumAssessFragment(System.Linq.Expressions.Expression{System.Func{accreditation.Model.AssessFragment,System.Nullable{System.Int32}}},System.Linq.Expressions.Expression{System.Func{accreditation.Model.AssessFragment,System.Boolean}})">
            <summary>
            根据条件统计考核分解项
            </summary>
            <param name="selecter">统计字段</param>
            <param name="predicate">查询条件</param>
            <returns>统计值</returns>
        </member>
        <member name="M:accreditation.DataAccess.AssessFragmentDataAccess.SumAssessFragment(System.Linq.Expressions.Expression{System.Func{accreditation.Model.AssessFragment,System.Nullable{System.Decimal}}},System.Linq.Expressions.Expression{System.Func{accreditation.Model.AssessFragment,System.Boolean}})">
            <summary>
            根据条件统计考核分解项
            </summary>
            <param name="selecter">统计字段</param>
            <param name="predicate">查询条件</param>
            <returns>统计值</returns>
        </member>
        <member name="M:accreditation.DataAccess.AssessFragmentDataAccess.QueryAssessFragment(System.Linq.Expressions.Expression{System.Func{accreditation.Model.AssessFragment,System.Boolean}},Mooho.Base.Common.Pages)">
            <summary>
            根据条件查询考核分解项
            </summary>
            <param name="predicate">查询条件</param>
            <param name="pages">分页信息</param>
            <returns>考核分解项集合</returns>
        </member>
        <member name="M:accreditation.DataAccess.AssessFragmentDataAccess.QueryAssessFragment(System.Linq.Expressions.Expression{System.Func{accreditation.Model.AssessFragment,System.Boolean}},System.Linq.Expressions.LambdaExpression,Mooho.Base.Common.Pages)">
            <summary>
            根据条件查询考核分解项
            </summary>
            <param name="predicate">查询条件</param>
            <param name="dynamicPredicate">动态查询条件</param>
            <param name="pages">分页信息</param>
            <returns>考核分解项集合</returns>
        </member>
        <member name="T:accreditation.DataAccess.AssessMethodDataAccess">
            <summary>
            考核方式数据访问
            </summary>
        </member>
        <member name="M:accreditation.DataAccess.AssessMethodDataAccess.AddAssessMethod(accreditation.Model.AssessMethod)">
            <summary>
            新增考核方式
            </summary>
            <param name="assessMethod">考核方式</param>
            <return>考核方式</return>
        </member>
        <member name="M:accreditation.DataAccess.AssessMethodDataAccess.UpdateAssessMethod(accreditation.Model.AssessMethod)">
            <summary>
            修改考核方式
            </summary>
            <param name="assessMethod">考核方式</param>
            <return>考核方式</return>
        </member>
        <member name="M:accreditation.DataAccess.AssessMethodDataAccess.SaveAssessMethod(accreditation.Model.AssessMethod)">
            <summary>
            保存考核方式
            </summary>
            <param name="assessMethod">考核方式</param>
            <return>考核方式</return>
        </member>
        <member name="M:accreditation.DataAccess.AssessMethodDataAccess.RemoveAssessMethod(accreditation.Model.AssessMethod)">
            <summary>
            删除考核方式
            </summary>
            <param name="assessMethod">考核方式</param>
        </member>
        <member name="M:accreditation.DataAccess.AssessMethodDataAccess.RemoveAssessMethod(System.Linq.Expressions.Expression{System.Func{accreditation.Model.AssessMethod,System.Boolean}})">
            <summary>
            根据条件删除考核方式
            </summary>
            <param name="predicate">查询条件</param>
        </member>
        <member name="M:accreditation.DataAccess.AssessMethodDataAccess.GetAssessMethod(System.Int64)">
            <summary>
            获取考核方式
            </summary>
            <param name="id">唯一编号</param>
            <returns>考核方式</returns>
        </member>
        <member name="M:accreditation.DataAccess.AssessMethodDataAccess.GetAssessMethodOrDefault(System.Int64,accreditation.Model.AssessMethod)">
            <summary>
            获取考核方式
            </summary>
            <param name="id">唯一编号</param>
            <param name="defaultEntity">默认值</param>
            <returns>考核方式</returns>
        </member>
        <member name="M:accreditation.DataAccess.AssessMethodDataAccess.GetAssessMethod(System.Linq.Expressions.Expression{System.Func{accreditation.Model.AssessMethod,System.Boolean}})">
            <summary>
            根据条件获取考核方式
            </summary>
            <param name="predicate">查询条件</param>
            <returns>考核方式</returns>
        </member>
        <member name="M:accreditation.DataAccess.AssessMethodDataAccess.GetAssessMethodOrDefault(System.Linq.Expressions.Expression{System.Func{accreditation.Model.AssessMethod,System.Boolean}},accreditation.Model.AssessMethod)">
            <summary>
            根据条件获取考核方式
            </summary>
            <param name="predicate">查询条件</param>
            <param name="defaultEntity">默认值</param>
            <returns>考核方式</returns>
        </member>
        <member name="M:accreditation.DataAccess.AssessMethodDataAccess.CountAssessMethod(System.Linq.Expressions.Expression{System.Func{accreditation.Model.AssessMethod,System.Boolean}})">
            <summary>
            根据条件获取考核方式数量
            </summary>
            <param name="predicate">查询条件</param>
            <returns>考核方式数量</returns>
        </member>
        <member name="M:accreditation.DataAccess.AssessMethodDataAccess.SumAssessMethod(System.Linq.Expressions.Expression{System.Func{accreditation.Model.AssessMethod,System.Nullable{System.Int32}}},System.Linq.Expressions.Expression{System.Func{accreditation.Model.AssessMethod,System.Boolean}})">
            <summary>
            根据条件统计考核方式
            </summary>
            <param name="selecter">统计字段</param>
            <param name="predicate">查询条件</param>
            <returns>统计值</returns>
        </member>
        <member name="M:accreditation.DataAccess.AssessMethodDataAccess.SumAssessMethod(System.Linq.Expressions.Expression{System.Func{accreditation.Model.AssessMethod,System.Nullable{System.Decimal}}},System.Linq.Expressions.Expression{System.Func{accreditation.Model.AssessMethod,System.Boolean}})">
            <summary>
            根据条件统计考核方式
            </summary>
            <param name="selecter">统计字段</param>
            <param name="predicate">查询条件</param>
            <returns>统计值</returns>
        </member>
        <member name="M:accreditation.DataAccess.AssessMethodDataAccess.QueryAssessMethod(System.Linq.Expressions.Expression{System.Func{accreditation.Model.AssessMethod,System.Boolean}},Mooho.Base.Common.Pages)">
            <summary>
            根据条件查询考核方式
            </summary>
            <param name="predicate">查询条件</param>
            <param name="pages">分页信息</param>
            <returns>考核方式集合</returns>
        </member>
        <member name="M:accreditation.DataAccess.AssessMethodDataAccess.QueryAssessMethod(System.Linq.Expressions.Expression{System.Func{accreditation.Model.AssessMethod,System.Boolean}},System.Linq.Expressions.LambdaExpression,Mooho.Base.Common.Pages)">
            <summary>
            根据条件查询考核方式
            </summary>
            <param name="predicate">查询条件</param>
            <param name="dynamicPredicate">动态查询条件</param>
            <param name="pages">分页信息</param>
            <returns>考核方式集合</returns>
        </member>
        <member name="T:accreditation.DataAccess.CourseDataAccess">
            <summary>
            课程数据访问
            </summary>
        </member>
        <member name="M:accreditation.DataAccess.CourseDataAccess.AddCourse(accreditation.Model.Course)">
            <summary>
            新增课程
            </summary>
            <param name="course">课程</param>
            <return>课程</return>
        </member>
        <member name="M:accreditation.DataAccess.CourseDataAccess.UpdateCourse(accreditation.Model.Course)">
            <summary>
            修改课程
            </summary>
            <param name="course">课程</param>
            <return>课程</return>
        </member>
        <member name="M:accreditation.DataAccess.CourseDataAccess.SaveCourse(accreditation.Model.Course)">
            <summary>
            保存课程
            </summary>
            <param name="course">课程</param>
            <return>课程</return>
        </member>
        <member name="M:accreditation.DataAccess.CourseDataAccess.RemoveCourse(accreditation.Model.Course)">
            <summary>
            删除课程
            </summary>
            <param name="course">课程</param>
        </member>
        <member name="M:accreditation.DataAccess.CourseDataAccess.RemoveCourse(System.Linq.Expressions.Expression{System.Func{accreditation.Model.Course,System.Boolean}})">
            <summary>
            根据条件删除课程
            </summary>
            <param name="predicate">查询条件</param>
        </member>
        <member name="M:accreditation.DataAccess.CourseDataAccess.GetCourse(System.Int64)">
            <summary>
            获取课程
            </summary>
            <param name="id">唯一编号</param>
            <returns>课程</returns>
        </member>
        <member name="M:accreditation.DataAccess.CourseDataAccess.GetCourseOrDefault(System.Int64,accreditation.Model.Course)">
            <summary>
            获取课程
            </summary>
            <param name="id">唯一编号</param>
            <param name="defaultEntity">默认值</param>
            <returns>课程</returns>
        </member>
        <member name="M:accreditation.DataAccess.CourseDataAccess.GetCourse(System.Linq.Expressions.Expression{System.Func{accreditation.Model.Course,System.Boolean}})">
            <summary>
            根据条件获取课程
            </summary>
            <param name="predicate">查询条件</param>
            <returns>课程</returns>
        </member>
        <member name="M:accreditation.DataAccess.CourseDataAccess.GetCourseOrDefault(System.Linq.Expressions.Expression{System.Func{accreditation.Model.Course,System.Boolean}},accreditation.Model.Course)">
            <summary>
            根据条件获取课程
            </summary>
            <param name="predicate">查询条件</param>
            <param name="defaultEntity">默认值</param>
            <returns>课程</returns>
        </member>
        <member name="M:accreditation.DataAccess.CourseDataAccess.CountCourse(System.Linq.Expressions.Expression{System.Func{accreditation.Model.Course,System.Boolean}})">
            <summary>
            根据条件获取课程数量
            </summary>
            <param name="predicate">查询条件</param>
            <returns>课程数量</returns>
        </member>
        <member name="M:accreditation.DataAccess.CourseDataAccess.SumCourse(System.Linq.Expressions.Expression{System.Func{accreditation.Model.Course,System.Nullable{System.Int32}}},System.Linq.Expressions.Expression{System.Func{accreditation.Model.Course,System.Boolean}})">
            <summary>
            根据条件统计课程
            </summary>
            <param name="selecter">统计字段</param>
            <param name="predicate">查询条件</param>
            <returns>统计值</returns>
        </member>
        <member name="M:accreditation.DataAccess.CourseDataAccess.SumCourse(System.Linq.Expressions.Expression{System.Func{accreditation.Model.Course,System.Nullable{System.Decimal}}},System.Linq.Expressions.Expression{System.Func{accreditation.Model.Course,System.Boolean}})">
            <summary>
            根据条件统计课程
            </summary>
            <param name="selecter">统计字段</param>
            <param name="predicate">查询条件</param>
            <returns>统计值</returns>
        </member>
        <member name="M:accreditation.DataAccess.CourseDataAccess.QueryCourse(System.Linq.Expressions.Expression{System.Func{accreditation.Model.Course,System.Boolean}},Mooho.Base.Common.Pages)">
            <summary>
            根据条件查询课程
            </summary>
            <param name="predicate">查询条件</param>
            <param name="pages">分页信息</param>
            <returns>课程集合</returns>
        </member>
        <member name="M:accreditation.DataAccess.CourseDataAccess.QueryCourse(System.Linq.Expressions.Expression{System.Func{accreditation.Model.Course,System.Boolean}},System.Linq.Expressions.LambdaExpression,Mooho.Base.Common.Pages)">
            <summary>
            根据条件查询课程
            </summary>
            <param name="predicate">查询条件</param>
            <param name="dynamicPredicate">动态查询条件</param>
            <param name="pages">分页信息</param>
            <returns>课程集合</returns>
        </member>
        <member name="T:accreditation.DataAccess.CourseTargetDataAccess">
            <summary>
            课程目标数据访问
            </summary>
        </member>
        <member name="M:accreditation.DataAccess.CourseTargetDataAccess.AddCourseTarget(accreditation.Model.CourseTarget)">
            <summary>
            新增课程目标
            </summary>
            <param name="courseTarget">课程目标</param>
            <return>课程目标</return>
        </member>
        <member name="M:accreditation.DataAccess.CourseTargetDataAccess.UpdateCourseTarget(accreditation.Model.CourseTarget)">
            <summary>
            修改课程目标
            </summary>
            <param name="courseTarget">课程目标</param>
            <return>课程目标</return>
        </member>
        <member name="M:accreditation.DataAccess.CourseTargetDataAccess.SaveCourseTarget(accreditation.Model.CourseTarget)">
            <summary>
            保存课程目标
            </summary>
            <param name="courseTarget">课程目标</param>
            <return>课程目标</return>
        </member>
        <member name="M:accreditation.DataAccess.CourseTargetDataAccess.RemoveCourseTarget(accreditation.Model.CourseTarget)">
            <summary>
            删除课程目标
            </summary>
            <param name="courseTarget">课程目标</param>
        </member>
        <member name="M:accreditation.DataAccess.CourseTargetDataAccess.RemoveCourseTarget(System.Linq.Expressions.Expression{System.Func{accreditation.Model.CourseTarget,System.Boolean}})">
            <summary>
            根据条件删除课程目标
            </summary>
            <param name="predicate">查询条件</param>
        </member>
        <member name="M:accreditation.DataAccess.CourseTargetDataAccess.GetCourseTarget(System.Int64)">
            <summary>
            获取课程目标
            </summary>
            <param name="id">唯一编号</param>
            <returns>课程目标</returns>
        </member>
        <member name="M:accreditation.DataAccess.CourseTargetDataAccess.GetCourseTargetOrDefault(System.Int64,accreditation.Model.CourseTarget)">
            <summary>
            获取课程目标
            </summary>
            <param name="id">唯一编号</param>
            <param name="defaultEntity">默认值</param>
            <returns>课程目标</returns>
        </member>
        <member name="M:accreditation.DataAccess.CourseTargetDataAccess.GetCourseTarget(System.Linq.Expressions.Expression{System.Func{accreditation.Model.CourseTarget,System.Boolean}})">
            <summary>
            根据条件获取课程目标
            </summary>
            <param name="predicate">查询条件</param>
            <returns>课程目标</returns>
        </member>
        <member name="M:accreditation.DataAccess.CourseTargetDataAccess.GetCourseTargetOrDefault(System.Linq.Expressions.Expression{System.Func{accreditation.Model.CourseTarget,System.Boolean}},accreditation.Model.CourseTarget)">
            <summary>
            根据条件获取课程目标
            </summary>
            <param name="predicate">查询条件</param>
            <param name="defaultEntity">默认值</param>
            <returns>课程目标</returns>
        </member>
        <member name="M:accreditation.DataAccess.CourseTargetDataAccess.CountCourseTarget(System.Linq.Expressions.Expression{System.Func{accreditation.Model.CourseTarget,System.Boolean}})">
            <summary>
            根据条件获取课程目标数量
            </summary>
            <param name="predicate">查询条件</param>
            <returns>课程目标数量</returns>
        </member>
        <member name="M:accreditation.DataAccess.CourseTargetDataAccess.SumCourseTarget(System.Linq.Expressions.Expression{System.Func{accreditation.Model.CourseTarget,System.Nullable{System.Int32}}},System.Linq.Expressions.Expression{System.Func{accreditation.Model.CourseTarget,System.Boolean}})">
            <summary>
            根据条件统计课程目标
            </summary>
            <param name="selecter">统计字段</param>
            <param name="predicate">查询条件</param>
            <returns>统计值</returns>
        </member>
        <member name="M:accreditation.DataAccess.CourseTargetDataAccess.SumCourseTarget(System.Linq.Expressions.Expression{System.Func{accreditation.Model.CourseTarget,System.Nullable{System.Decimal}}},System.Linq.Expressions.Expression{System.Func{accreditation.Model.CourseTarget,System.Boolean}})">
            <summary>
            根据条件统计课程目标
            </summary>
            <param name="selecter">统计字段</param>
            <param name="predicate">查询条件</param>
            <returns>统计值</returns>
        </member>
        <member name="M:accreditation.DataAccess.CourseTargetDataAccess.QueryCourseTarget(System.Linq.Expressions.Expression{System.Func{accreditation.Model.CourseTarget,System.Boolean}},Mooho.Base.Common.Pages)">
            <summary>
            根据条件查询课程目标
            </summary>
            <param name="predicate">查询条件</param>
            <param name="pages">分页信息</param>
            <returns>课程目标集合</returns>
        </member>
        <member name="M:accreditation.DataAccess.CourseTargetDataAccess.QueryCourseTarget(System.Linq.Expressions.Expression{System.Func{accreditation.Model.CourseTarget,System.Boolean}},System.Linq.Expressions.LambdaExpression,Mooho.Base.Common.Pages)">
            <summary>
            根据条件查询课程目标
            </summary>
            <param name="predicate">查询条件</param>
            <param name="dynamicPredicate">动态查询条件</param>
            <param name="pages">分页信息</param>
            <returns>课程目标集合</returns>
        </member>
        <member name="T:accreditation.DataAccess.CultivationProjectDataAccess">
            <summary>
            培养计划数据访问
            </summary>
        </member>
        <member name="M:accreditation.DataAccess.CultivationProjectDataAccess.AddCultivationProject(accreditation.Model.CultivationProject)">
            <summary>
            新增培养计划
            </summary>
            <param name="cultivationProject">培养计划</param>
            <return>培养计划</return>
        </member>
        <member name="M:accreditation.DataAccess.CultivationProjectDataAccess.UpdateCultivationProject(accreditation.Model.CultivationProject)">
            <summary>
            修改培养计划
            </summary>
            <param name="cultivationProject">培养计划</param>
            <return>培养计划</return>
        </member>
        <member name="M:accreditation.DataAccess.CultivationProjectDataAccess.SaveCultivationProject(accreditation.Model.CultivationProject)">
            <summary>
            保存培养计划
            </summary>
            <param name="cultivationProject">培养计划</param>
            <return>培养计划</return>
        </member>
        <member name="M:accreditation.DataAccess.CultivationProjectDataAccess.RemoveCultivationProject(accreditation.Model.CultivationProject)">
            <summary>
            删除培养计划
            </summary>
            <param name="cultivationProject">培养计划</param>
        </member>
        <member name="M:accreditation.DataAccess.CultivationProjectDataAccess.RemoveCultivationProject(System.Linq.Expressions.Expression{System.Func{accreditation.Model.CultivationProject,System.Boolean}})">
            <summary>
            根据条件删除培养计划
            </summary>
            <param name="predicate">查询条件</param>
        </member>
        <member name="M:accreditation.DataAccess.CultivationProjectDataAccess.GetCultivationProject(System.Int64)">
            <summary>
            获取培养计划
            </summary>
            <param name="id">唯一编号</param>
            <returns>培养计划</returns>
        </member>
        <member name="M:accreditation.DataAccess.CultivationProjectDataAccess.GetCultivationProjectOrDefault(System.Int64,accreditation.Model.CultivationProject)">
            <summary>
            获取培养计划
            </summary>
            <param name="id">唯一编号</param>
            <param name="defaultEntity">默认值</param>
            <returns>培养计划</returns>
        </member>
        <member name="M:accreditation.DataAccess.CultivationProjectDataAccess.GetCultivationProject(System.Linq.Expressions.Expression{System.Func{accreditation.Model.CultivationProject,System.Boolean}})">
            <summary>
            根据条件获取培养计划
            </summary>
            <param name="predicate">查询条件</param>
            <returns>培养计划</returns>
        </member>
        <member name="M:accreditation.DataAccess.CultivationProjectDataAccess.GetCultivationProjectOrDefault(System.Linq.Expressions.Expression{System.Func{accreditation.Model.CultivationProject,System.Boolean}},accreditation.Model.CultivationProject)">
            <summary>
            根据条件获取培养计划
            </summary>
            <param name="predicate">查询条件</param>
            <param name="defaultEntity">默认值</param>
            <returns>培养计划</returns>
        </member>
        <member name="M:accreditation.DataAccess.CultivationProjectDataAccess.CountCultivationProject(System.Linq.Expressions.Expression{System.Func{accreditation.Model.CultivationProject,System.Boolean}})">
            <summary>
            根据条件获取培养计划数量
            </summary>
            <param name="predicate">查询条件</param>
            <returns>培养计划数量</returns>
        </member>
        <member name="M:accreditation.DataAccess.CultivationProjectDataAccess.SumCultivationProject(System.Linq.Expressions.Expression{System.Func{accreditation.Model.CultivationProject,System.Nullable{System.Int32}}},System.Linq.Expressions.Expression{System.Func{accreditation.Model.CultivationProject,System.Boolean}})">
            <summary>
            根据条件统计培养计划
            </summary>
            <param name="selecter">统计字段</param>
            <param name="predicate">查询条件</param>
            <returns>统计值</returns>
        </member>
        <member name="M:accreditation.DataAccess.CultivationProjectDataAccess.SumCultivationProject(System.Linq.Expressions.Expression{System.Func{accreditation.Model.CultivationProject,System.Nullable{System.Decimal}}},System.Linq.Expressions.Expression{System.Func{accreditation.Model.CultivationProject,System.Boolean}})">
            <summary>
            根据条件统计培养计划
            </summary>
            <param name="selecter">统计字段</param>
            <param name="predicate">查询条件</param>
            <returns>统计值</returns>
        </member>
        <member name="M:accreditation.DataAccess.CultivationProjectDataAccess.QueryCultivationProject(System.Linq.Expressions.Expression{System.Func{accreditation.Model.CultivationProject,System.Boolean}},Mooho.Base.Common.Pages)">
            <summary>
            根据条件查询培养计划
            </summary>
            <param name="predicate">查询条件</param>
            <param name="pages">分页信息</param>
            <returns>培养计划集合</returns>
        </member>
        <member name="M:accreditation.DataAccess.CultivationProjectDataAccess.QueryCultivationProject(System.Linq.Expressions.Expression{System.Func{accreditation.Model.CultivationProject,System.Boolean}},System.Linq.Expressions.LambdaExpression,Mooho.Base.Common.Pages)">
            <summary>
            根据条件查询培养计划
            </summary>
            <param name="predicate">查询条件</param>
            <param name="dynamicPredicate">动态查询条件</param>
            <param name="pages">分页信息</param>
            <returns>培养计划集合</returns>
        </member>
        <member name="T:accreditation.DataAccess.GraduationPointDataAccess">
            <summary>
            毕业指标点数据访问
            </summary>
        </member>
        <member name="M:accreditation.DataAccess.GraduationPointDataAccess.AddGraduationPoint(accreditation.Model.GraduationPoint)">
            <summary>
            新增毕业指标点
            </summary>
            <param name="graduationPoint">毕业指标点</param>
            <return>毕业指标点</return>
        </member>
        <member name="M:accreditation.DataAccess.GraduationPointDataAccess.UpdateGraduationPoint(accreditation.Model.GraduationPoint)">
            <summary>
            修改毕业指标点
            </summary>
            <param name="graduationPoint">毕业指标点</param>
            <return>毕业指标点</return>
        </member>
        <member name="M:accreditation.DataAccess.GraduationPointDataAccess.SaveGraduationPoint(accreditation.Model.GraduationPoint)">
            <summary>
            保存毕业指标点
            </summary>
            <param name="graduationPoint">毕业指标点</param>
            <return>毕业指标点</return>
        </member>
        <member name="M:accreditation.DataAccess.GraduationPointDataAccess.RemoveGraduationPoint(accreditation.Model.GraduationPoint)">
            <summary>
            删除毕业指标点
            </summary>
            <param name="graduationPoint">毕业指标点</param>
        </member>
        <member name="M:accreditation.DataAccess.GraduationPointDataAccess.RemoveGraduationPoint(System.Linq.Expressions.Expression{System.Func{accreditation.Model.GraduationPoint,System.Boolean}})">
            <summary>
            根据条件删除毕业指标点
            </summary>
            <param name="predicate">查询条件</param>
        </member>
        <member name="M:accreditation.DataAccess.GraduationPointDataAccess.GetGraduationPoint(System.Int64)">
            <summary>
            获取毕业指标点
            </summary>
            <param name="id">唯一编号</param>
            <returns>毕业指标点</returns>
        </member>
        <member name="M:accreditation.DataAccess.GraduationPointDataAccess.GetGraduationPointOrDefault(System.Int64,accreditation.Model.GraduationPoint)">
            <summary>
            获取毕业指标点
            </summary>
            <param name="id">唯一编号</param>
            <param name="defaultEntity">默认值</param>
            <returns>毕业指标点</returns>
        </member>
        <member name="M:accreditation.DataAccess.GraduationPointDataAccess.GetGraduationPoint(System.Linq.Expressions.Expression{System.Func{accreditation.Model.GraduationPoint,System.Boolean}})">
            <summary>
            根据条件获取毕业指标点
            </summary>
            <param name="predicate">查询条件</param>
            <returns>毕业指标点</returns>
        </member>
        <member name="M:accreditation.DataAccess.GraduationPointDataAccess.GetGraduationPointOrDefault(System.Linq.Expressions.Expression{System.Func{accreditation.Model.GraduationPoint,System.Boolean}},accreditation.Model.GraduationPoint)">
            <summary>
            根据条件获取毕业指标点
            </summary>
            <param name="predicate">查询条件</param>
            <param name="defaultEntity">默认值</param>
            <returns>毕业指标点</returns>
        </member>
        <member name="M:accreditation.DataAccess.GraduationPointDataAccess.CountGraduationPoint(System.Linq.Expressions.Expression{System.Func{accreditation.Model.GraduationPoint,System.Boolean}})">
            <summary>
            根据条件获取毕业指标点数量
            </summary>
            <param name="predicate">查询条件</param>
            <returns>毕业指标点数量</returns>
        </member>
        <member name="M:accreditation.DataAccess.GraduationPointDataAccess.SumGraduationPoint(System.Linq.Expressions.Expression{System.Func{accreditation.Model.GraduationPoint,System.Nullable{System.Int32}}},System.Linq.Expressions.Expression{System.Func{accreditation.Model.GraduationPoint,System.Boolean}})">
            <summary>
            根据条件统计毕业指标点
            </summary>
            <param name="selecter">统计字段</param>
            <param name="predicate">查询条件</param>
            <returns>统计值</returns>
        </member>
        <member name="M:accreditation.DataAccess.GraduationPointDataAccess.SumGraduationPoint(System.Linq.Expressions.Expression{System.Func{accreditation.Model.GraduationPoint,System.Nullable{System.Decimal}}},System.Linq.Expressions.Expression{System.Func{accreditation.Model.GraduationPoint,System.Boolean}})">
            <summary>
            根据条件统计毕业指标点
            </summary>
            <param name="selecter">统计字段</param>
            <param name="predicate">查询条件</param>
            <returns>统计值</returns>
        </member>
        <member name="M:accreditation.DataAccess.GraduationPointDataAccess.QueryGraduationPoint(System.Linq.Expressions.Expression{System.Func{accreditation.Model.GraduationPoint,System.Boolean}},Mooho.Base.Common.Pages)">
            <summary>
            根据条件查询毕业指标点
            </summary>
            <param name="predicate">查询条件</param>
            <param name="pages">分页信息</param>
            <returns>毕业指标点集合</returns>
        </member>
        <member name="M:accreditation.DataAccess.GraduationPointDataAccess.QueryGraduationPoint(System.Linq.Expressions.Expression{System.Func{accreditation.Model.GraduationPoint,System.Boolean}},System.Linq.Expressions.LambdaExpression,Mooho.Base.Common.Pages)">
            <summary>
            根据条件查询毕业指标点
            </summary>
            <param name="predicate">查询条件</param>
            <param name="dynamicPredicate">动态查询条件</param>
            <param name="pages">分页信息</param>
            <returns>毕业指标点集合</returns>
        </member>
        <member name="T:accreditation.DataAccess.GraduationReqDataAccess">
            <summary>
            毕业要求数据访问
            </summary>
        </member>
        <member name="M:accreditation.DataAccess.GraduationReqDataAccess.AddGraduationReq(accreditation.Model.GraduationReq)">
            <summary>
            新增毕业要求
            </summary>
            <param name="graduationReq">毕业要求</param>
            <return>毕业要求</return>
        </member>
        <member name="M:accreditation.DataAccess.GraduationReqDataAccess.UpdateGraduationReq(accreditation.Model.GraduationReq)">
            <summary>
            修改毕业要求
            </summary>
            <param name="graduationReq">毕业要求</param>
            <return>毕业要求</return>
        </member>
        <member name="M:accreditation.DataAccess.GraduationReqDataAccess.SaveGraduationReq(accreditation.Model.GraduationReq)">
            <summary>
            保存毕业要求
            </summary>
            <param name="graduationReq">毕业要求</param>
            <return>毕业要求</return>
        </member>
        <member name="M:accreditation.DataAccess.GraduationReqDataAccess.RemoveGraduationReq(accreditation.Model.GraduationReq)">
            <summary>
            删除毕业要求
            </summary>
            <param name="graduationReq">毕业要求</param>
        </member>
        <member name="M:accreditation.DataAccess.GraduationReqDataAccess.RemoveGraduationReq(System.Linq.Expressions.Expression{System.Func{accreditation.Model.GraduationReq,System.Boolean}})">
            <summary>
            根据条件删除毕业要求
            </summary>
            <param name="predicate">查询条件</param>
        </member>
        <member name="M:accreditation.DataAccess.GraduationReqDataAccess.GetGraduationReq(System.Int64)">
            <summary>
            获取毕业要求
            </summary>
            <param name="id">唯一编号</param>
            <returns>毕业要求</returns>
        </member>
        <member name="M:accreditation.DataAccess.GraduationReqDataAccess.GetGraduationReqOrDefault(System.Int64,accreditation.Model.GraduationReq)">
            <summary>
            获取毕业要求
            </summary>
            <param name="id">唯一编号</param>
            <param name="defaultEntity">默认值</param>
            <returns>毕业要求</returns>
        </member>
        <member name="M:accreditation.DataAccess.GraduationReqDataAccess.GetGraduationReq(System.Linq.Expressions.Expression{System.Func{accreditation.Model.GraduationReq,System.Boolean}})">
            <summary>
            根据条件获取毕业要求
            </summary>
            <param name="predicate">查询条件</param>
            <returns>毕业要求</returns>
        </member>
        <member name="M:accreditation.DataAccess.GraduationReqDataAccess.GetGraduationReqOrDefault(System.Linq.Expressions.Expression{System.Func{accreditation.Model.GraduationReq,System.Boolean}},accreditation.Model.GraduationReq)">
            <summary>
            根据条件获取毕业要求
            </summary>
            <param name="predicate">查询条件</param>
            <param name="defaultEntity">默认值</param>
            <returns>毕业要求</returns>
        </member>
        <member name="M:accreditation.DataAccess.GraduationReqDataAccess.CountGraduationReq(System.Linq.Expressions.Expression{System.Func{accreditation.Model.GraduationReq,System.Boolean}})">
            <summary>
            根据条件获取毕业要求数量
            </summary>
            <param name="predicate">查询条件</param>
            <returns>毕业要求数量</returns>
        </member>
        <member name="M:accreditation.DataAccess.GraduationReqDataAccess.SumGraduationReq(System.Linq.Expressions.Expression{System.Func{accreditation.Model.GraduationReq,System.Nullable{System.Int32}}},System.Linq.Expressions.Expression{System.Func{accreditation.Model.GraduationReq,System.Boolean}})">
            <summary>
            根据条件统计毕业要求
            </summary>
            <param name="selecter">统计字段</param>
            <param name="predicate">查询条件</param>
            <returns>统计值</returns>
        </member>
        <member name="M:accreditation.DataAccess.GraduationReqDataAccess.SumGraduationReq(System.Linq.Expressions.Expression{System.Func{accreditation.Model.GraduationReq,System.Nullable{System.Decimal}}},System.Linq.Expressions.Expression{System.Func{accreditation.Model.GraduationReq,System.Boolean}})">
            <summary>
            根据条件统计毕业要求
            </summary>
            <param name="selecter">统计字段</param>
            <param name="predicate">查询条件</param>
            <returns>统计值</returns>
        </member>
        <member name="M:accreditation.DataAccess.GraduationReqDataAccess.QueryGraduationReq(System.Linq.Expressions.Expression{System.Func{accreditation.Model.GraduationReq,System.Boolean}},Mooho.Base.Common.Pages)">
            <summary>
            根据条件查询毕业要求
            </summary>
            <param name="predicate">查询条件</param>
            <param name="pages">分页信息</param>
            <returns>毕业要求集合</returns>
        </member>
        <member name="M:accreditation.DataAccess.GraduationReqDataAccess.QueryGraduationReq(System.Linq.Expressions.Expression{System.Func{accreditation.Model.GraduationReq,System.Boolean}},System.Linq.Expressions.LambdaExpression,Mooho.Base.Common.Pages)">
            <summary>
            根据条件查询毕业要求
            </summary>
            <param name="predicate">查询条件</param>
            <param name="dynamicPredicate">动态查询条件</param>
            <param name="pages">分页信息</param>
            <returns>毕业要求集合</returns>
        </member>
        <member name="T:accreditation.DataAccess.StudentInfoDataAccess">
            <summary>
            学生信息数据访问
            </summary>
        </member>
        <member name="M:accreditation.DataAccess.StudentInfoDataAccess.AddStudentInfo(accreditation.Model.StudentInfo)">
            <summary>
            新增学生信息
            </summary>
            <param name="studentInfo">学生信息</param>
            <return>学生信息</return>
        </member>
        <member name="M:accreditation.DataAccess.StudentInfoDataAccess.UpdateStudentInfo(accreditation.Model.StudentInfo)">
            <summary>
            修改学生信息
            </summary>
            <param name="studentInfo">学生信息</param>
            <return>学生信息</return>
        </member>
        <member name="M:accreditation.DataAccess.StudentInfoDataAccess.SaveStudentInfo(accreditation.Model.StudentInfo)">
            <summary>
            保存学生信息
            </summary>
            <param name="studentInfo">学生信息</param>
            <return>学生信息</return>
        </member>
        <member name="M:accreditation.DataAccess.StudentInfoDataAccess.RemoveStudentInfo(accreditation.Model.StudentInfo)">
            <summary>
            删除学生信息
            </summary>
            <param name="studentInfo">学生信息</param>
        </member>
        <member name="M:accreditation.DataAccess.StudentInfoDataAccess.RemoveStudentInfo(System.Linq.Expressions.Expression{System.Func{accreditation.Model.StudentInfo,System.Boolean}})">
            <summary>
            根据条件删除学生信息
            </summary>
            <param name="predicate">查询条件</param>
        </member>
        <member name="M:accreditation.DataAccess.StudentInfoDataAccess.GetStudentInfo(System.Int64)">
            <summary>
            获取学生信息
            </summary>
            <param name="id">唯一编号</param>
            <returns>学生信息</returns>
        </member>
        <member name="M:accreditation.DataAccess.StudentInfoDataAccess.GetStudentInfoOrDefault(System.Int64,accreditation.Model.StudentInfo)">
            <summary>
            获取学生信息
            </summary>
            <param name="id">唯一编号</param>
            <param name="defaultEntity">默认值</param>
            <returns>学生信息</returns>
        </member>
        <member name="M:accreditation.DataAccess.StudentInfoDataAccess.GetStudentInfo(System.Linq.Expressions.Expression{System.Func{accreditation.Model.StudentInfo,System.Boolean}})">
            <summary>
            根据条件获取学生信息
            </summary>
            <param name="predicate">查询条件</param>
            <returns>学生信息</returns>
        </member>
        <member name="M:accreditation.DataAccess.StudentInfoDataAccess.GetStudentInfoOrDefault(System.Linq.Expressions.Expression{System.Func{accreditation.Model.StudentInfo,System.Boolean}},accreditation.Model.StudentInfo)">
            <summary>
            根据条件获取学生信息
            </summary>
            <param name="predicate">查询条件</param>
            <param name="defaultEntity">默认值</param>
            <returns>学生信息</returns>
        </member>
        <member name="M:accreditation.DataAccess.StudentInfoDataAccess.CountStudentInfo(System.Linq.Expressions.Expression{System.Func{accreditation.Model.StudentInfo,System.Boolean}})">
            <summary>
            根据条件获取学生信息数量
            </summary>
            <param name="predicate">查询条件</param>
            <returns>学生信息数量</returns>
        </member>
        <member name="M:accreditation.DataAccess.StudentInfoDataAccess.SumStudentInfo(System.Linq.Expressions.Expression{System.Func{accreditation.Model.StudentInfo,System.Nullable{System.Int32}}},System.Linq.Expressions.Expression{System.Func{accreditation.Model.StudentInfo,System.Boolean}})">
            <summary>
            根据条件统计学生信息
            </summary>
            <param name="selecter">统计字段</param>
            <param name="predicate">查询条件</param>
            <returns>统计值</returns>
        </member>
        <member name="M:accreditation.DataAccess.StudentInfoDataAccess.SumStudentInfo(System.Linq.Expressions.Expression{System.Func{accreditation.Model.StudentInfo,System.Nullable{System.Decimal}}},System.Linq.Expressions.Expression{System.Func{accreditation.Model.StudentInfo,System.Boolean}})">
            <summary>
            根据条件统计学生信息
            </summary>
            <param name="selecter">统计字段</param>
            <param name="predicate">查询条件</param>
            <returns>统计值</returns>
        </member>
        <member name="M:accreditation.DataAccess.StudentInfoDataAccess.QueryStudentInfo(System.Linq.Expressions.Expression{System.Func{accreditation.Model.StudentInfo,System.Boolean}},Mooho.Base.Common.Pages)">
            <summary>
            根据条件查询学生信息
            </summary>
            <param name="predicate">查询条件</param>
            <param name="pages">分页信息</param>
            <returns>学生信息集合</returns>
        </member>
        <member name="M:accreditation.DataAccess.StudentInfoDataAccess.QueryStudentInfo(System.Linq.Expressions.Expression{System.Func{accreditation.Model.StudentInfo,System.Boolean}},System.Linq.Expressions.LambdaExpression,Mooho.Base.Common.Pages)">
            <summary>
            根据条件查询学生信息
            </summary>
            <param name="predicate">查询条件</param>
            <param name="dynamicPredicate">动态查询条件</param>
            <param name="pages">分页信息</param>
            <returns>学生信息集合</returns>
        </member>
        <member name="T:accreditation.DataAccess.SyllabuseDataAccess">
            <summary>
            教学大纲数据访问
            </summary>
        </member>
        <member name="M:accreditation.DataAccess.SyllabuseDataAccess.AddSyllabuse(accreditation.Model.Syllabuse)">
            <summary>
            新增教学大纲
            </summary>
            <param name="syllabuse">教学大纲</param>
            <return>教学大纲</return>
        </member>
        <member name="M:accreditation.DataAccess.SyllabuseDataAccess.UpdateSyllabuse(accreditation.Model.Syllabuse)">
            <summary>
            修改教学大纲
            </summary>
            <param name="syllabuse">教学大纲</param>
            <return>教学大纲</return>
        </member>
        <member name="M:accreditation.DataAccess.SyllabuseDataAccess.SaveSyllabuse(accreditation.Model.Syllabuse)">
            <summary>
            保存教学大纲
            </summary>
            <param name="syllabuse">教学大纲</param>
            <return>教学大纲</return>
        </member>
        <member name="M:accreditation.DataAccess.SyllabuseDataAccess.RemoveSyllabuse(accreditation.Model.Syllabuse)">
            <summary>
            删除教学大纲
            </summary>
            <param name="syllabuse">教学大纲</param>
        </member>
        <member name="M:accreditation.DataAccess.SyllabuseDataAccess.RemoveSyllabuse(System.Linq.Expressions.Expression{System.Func{accreditation.Model.Syllabuse,System.Boolean}})">
            <summary>
            根据条件删除教学大纲
            </summary>
            <param name="predicate">查询条件</param>
        </member>
        <member name="M:accreditation.DataAccess.SyllabuseDataAccess.GetSyllabuse(System.Int64)">
            <summary>
            获取教学大纲
            </summary>
            <param name="id">唯一编号</param>
            <returns>教学大纲</returns>
        </member>
        <member name="M:accreditation.DataAccess.SyllabuseDataAccess.GetSyllabuseOrDefault(System.Int64,accreditation.Model.Syllabuse)">
            <summary>
            获取教学大纲
            </summary>
            <param name="id">唯一编号</param>
            <param name="defaultEntity">默认值</param>
            <returns>教学大纲</returns>
        </member>
        <member name="M:accreditation.DataAccess.SyllabuseDataAccess.GetSyllabuse(System.Linq.Expressions.Expression{System.Func{accreditation.Model.Syllabuse,System.Boolean}})">
            <summary>
            根据条件获取教学大纲
            </summary>
            <param name="predicate">查询条件</param>
            <returns>教学大纲</returns>
        </member>
        <member name="M:accreditation.DataAccess.SyllabuseDataAccess.GetSyllabuseOrDefault(System.Linq.Expressions.Expression{System.Func{accreditation.Model.Syllabuse,System.Boolean}},accreditation.Model.Syllabuse)">
            <summary>
            根据条件获取教学大纲
            </summary>
            <param name="predicate">查询条件</param>
            <param name="defaultEntity">默认值</param>
            <returns>教学大纲</returns>
        </member>
        <member name="M:accreditation.DataAccess.SyllabuseDataAccess.CountSyllabuse(System.Linq.Expressions.Expression{System.Func{accreditation.Model.Syllabuse,System.Boolean}})">
            <summary>
            根据条件获取教学大纲数量
            </summary>
            <param name="predicate">查询条件</param>
            <returns>教学大纲数量</returns>
        </member>
        <member name="M:accreditation.DataAccess.SyllabuseDataAccess.SumSyllabuse(System.Linq.Expressions.Expression{System.Func{accreditation.Model.Syllabuse,System.Nullable{System.Int32}}},System.Linq.Expressions.Expression{System.Func{accreditation.Model.Syllabuse,System.Boolean}})">
            <summary>
            根据条件统计教学大纲
            </summary>
            <param name="selecter">统计字段</param>
            <param name="predicate">查询条件</param>
            <returns>统计值</returns>
        </member>
        <member name="M:accreditation.DataAccess.SyllabuseDataAccess.SumSyllabuse(System.Linq.Expressions.Expression{System.Func{accreditation.Model.Syllabuse,System.Nullable{System.Decimal}}},System.Linq.Expressions.Expression{System.Func{accreditation.Model.Syllabuse,System.Boolean}})">
            <summary>
            根据条件统计教学大纲
            </summary>
            <param name="selecter">统计字段</param>
            <param name="predicate">查询条件</param>
            <returns>统计值</returns>
        </member>
        <member name="M:accreditation.DataAccess.SyllabuseDataAccess.QuerySyllabuse(System.Linq.Expressions.Expression{System.Func{accreditation.Model.Syllabuse,System.Boolean}},Mooho.Base.Common.Pages)">
            <summary>
            根据条件查询教学大纲
            </summary>
            <param name="predicate">查询条件</param>
            <param name="pages">分页信息</param>
            <returns>教学大纲集合</returns>
        </member>
        <member name="M:accreditation.DataAccess.SyllabuseDataAccess.QuerySyllabuse(System.Linq.Expressions.Expression{System.Func{accreditation.Model.Syllabuse,System.Boolean}},System.Linq.Expressions.LambdaExpression,Mooho.Base.Common.Pages)">
            <summary>
            根据条件查询教学大纲
            </summary>
            <param name="predicate">查询条件</param>
            <param name="dynamicPredicate">动态查询条件</param>
            <param name="pages">分页信息</param>
            <returns>教学大纲集合</returns>
        </member>
        <member name="T:accreditation.DataAccess.TeacherInfoDataAccess">
            <summary>
            教师信息数据访问
            </summary>
        </member>
        <member name="M:accreditation.DataAccess.TeacherInfoDataAccess.AddTeacherInfo(accreditation.Model.TeacherInfo)">
            <summary>
            新增教师信息
            </summary>
            <param name="teacherInfo">教师信息</param>
            <return>教师信息</return>
        </member>
        <member name="M:accreditation.DataAccess.TeacherInfoDataAccess.UpdateTeacherInfo(accreditation.Model.TeacherInfo)">
            <summary>
            修改教师信息
            </summary>
            <param name="teacherInfo">教师信息</param>
            <return>教师信息</return>
        </member>
        <member name="M:accreditation.DataAccess.TeacherInfoDataAccess.SaveTeacherInfo(accreditation.Model.TeacherInfo)">
            <summary>
            保存教师信息
            </summary>
            <param name="teacherInfo">教师信息</param>
            <return>教师信息</return>
        </member>
        <member name="M:accreditation.DataAccess.TeacherInfoDataAccess.RemoveTeacherInfo(accreditation.Model.TeacherInfo)">
            <summary>
            删除教师信息
            </summary>
            <param name="teacherInfo">教师信息</param>
        </member>
        <member name="M:accreditation.DataAccess.TeacherInfoDataAccess.RemoveTeacherInfo(System.Linq.Expressions.Expression{System.Func{accreditation.Model.TeacherInfo,System.Boolean}})">
            <summary>
            根据条件删除教师信息
            </summary>
            <param name="predicate">查询条件</param>
        </member>
        <member name="M:accreditation.DataAccess.TeacherInfoDataAccess.GetTeacherInfo(System.Int64)">
            <summary>
            获取教师信息
            </summary>
            <param name="id">唯一编号</param>
            <returns>教师信息</returns>
        </member>
        <member name="M:accreditation.DataAccess.TeacherInfoDataAccess.GetTeacherInfoOrDefault(System.Int64,accreditation.Model.TeacherInfo)">
            <summary>
            获取教师信息
            </summary>
            <param name="id">唯一编号</param>
            <param name="defaultEntity">默认值</param>
            <returns>教师信息</returns>
        </member>
        <member name="M:accreditation.DataAccess.TeacherInfoDataAccess.GetTeacherInfo(System.Linq.Expressions.Expression{System.Func{accreditation.Model.TeacherInfo,System.Boolean}})">
            <summary>
            根据条件获取教师信息
            </summary>
            <param name="predicate">查询条件</param>
            <returns>教师信息</returns>
        </member>
        <member name="M:accreditation.DataAccess.TeacherInfoDataAccess.GetTeacherInfoOrDefault(System.Linq.Expressions.Expression{System.Func{accreditation.Model.TeacherInfo,System.Boolean}},accreditation.Model.TeacherInfo)">
            <summary>
            根据条件获取教师信息
            </summary>
            <param name="predicate">查询条件</param>
            <param name="defaultEntity">默认值</param>
            <returns>教师信息</returns>
        </member>
        <member name="M:accreditation.DataAccess.TeacherInfoDataAccess.CountTeacherInfo(System.Linq.Expressions.Expression{System.Func{accreditation.Model.TeacherInfo,System.Boolean}})">
            <summary>
            根据条件获取教师信息数量
            </summary>
            <param name="predicate">查询条件</param>
            <returns>教师信息数量</returns>
        </member>
        <member name="M:accreditation.DataAccess.TeacherInfoDataAccess.SumTeacherInfo(System.Linq.Expressions.Expression{System.Func{accreditation.Model.TeacherInfo,System.Nullable{System.Int32}}},System.Linq.Expressions.Expression{System.Func{accreditation.Model.TeacherInfo,System.Boolean}})">
            <summary>
            根据条件统计教师信息
            </summary>
            <param name="selecter">统计字段</param>
            <param name="predicate">查询条件</param>
            <returns>统计值</returns>
        </member>
        <member name="M:accreditation.DataAccess.TeacherInfoDataAccess.SumTeacherInfo(System.Linq.Expressions.Expression{System.Func{accreditation.Model.TeacherInfo,System.Nullable{System.Decimal}}},System.Linq.Expressions.Expression{System.Func{accreditation.Model.TeacherInfo,System.Boolean}})">
            <summary>
            根据条件统计教师信息
            </summary>
            <param name="selecter">统计字段</param>
            <param name="predicate">查询条件</param>
            <returns>统计值</returns>
        </member>
        <member name="M:accreditation.DataAccess.TeacherInfoDataAccess.QueryTeacherInfo(System.Linq.Expressions.Expression{System.Func{accreditation.Model.TeacherInfo,System.Boolean}},Mooho.Base.Common.Pages)">
            <summary>
            根据条件查询教师信息
            </summary>
            <param name="predicate">查询条件</param>
            <param name="pages">分页信息</param>
            <returns>教师信息集合</returns>
        </member>
        <member name="M:accreditation.DataAccess.TeacherInfoDataAccess.QueryTeacherInfo(System.Linq.Expressions.Expression{System.Func{accreditation.Model.TeacherInfo,System.Boolean}},System.Linq.Expressions.LambdaExpression,Mooho.Base.Common.Pages)">
            <summary>
            根据条件查询教师信息
            </summary>
            <param name="predicate">查询条件</param>
            <param name="dynamicPredicate">动态查询条件</param>
            <param name="pages">分页信息</param>
            <returns>教师信息集合</returns>
        </member>
        <member name="T:accreditation.DataAccess.TeachingTeachclasseDataAccess">
            <summary>
            教学班数据访问
            </summary>
        </member>
        <member name="M:accreditation.DataAccess.TeachingTeachclasseDataAccess.AddTeachingTeachclasse(accreditation.Model.TeachingTeachclasse)">
            <summary>
            新增教学班
            </summary>
            <param name="teachingTeachclasse">教学班</param>
            <return>教学班</return>
        </member>
        <member name="M:accreditation.DataAccess.TeachingTeachclasseDataAccess.UpdateTeachingTeachclasse(accreditation.Model.TeachingTeachclasse)">
            <summary>
            修改教学班
            </summary>
            <param name="teachingTeachclasse">教学班</param>
            <return>教学班</return>
        </member>
        <member name="M:accreditation.DataAccess.TeachingTeachclasseDataAccess.SaveTeachingTeachclasse(accreditation.Model.TeachingTeachclasse)">
            <summary>
            保存教学班
            </summary>
            <param name="teachingTeachclasse">教学班</param>
            <return>教学班</return>
        </member>
        <member name="M:accreditation.DataAccess.TeachingTeachclasseDataAccess.RemoveTeachingTeachclasse(accreditation.Model.TeachingTeachclasse)">
            <summary>
            删除教学班
            </summary>
            <param name="teachingTeachclasse">教学班</param>
        </member>
        <member name="M:accreditation.DataAccess.TeachingTeachclasseDataAccess.RemoveTeachingTeachclasse(System.Linq.Expressions.Expression{System.Func{accreditation.Model.TeachingTeachclasse,System.Boolean}})">
            <summary>
            根据条件删除教学班
            </summary>
            <param name="predicate">查询条件</param>
        </member>
        <member name="M:accreditation.DataAccess.TeachingTeachclasseDataAccess.GetTeachingTeachclasse(System.Int64)">
            <summary>
            获取教学班
            </summary>
            <param name="id">唯一编号</param>
            <returns>教学班</returns>
        </member>
        <member name="M:accreditation.DataAccess.TeachingTeachclasseDataAccess.GetTeachingTeachclasseOrDefault(System.Int64,accreditation.Model.TeachingTeachclasse)">
            <summary>
            获取教学班
            </summary>
            <param name="id">唯一编号</param>
            <param name="defaultEntity">默认值</param>
            <returns>教学班</returns>
        </member>
        <member name="M:accreditation.DataAccess.TeachingTeachclasseDataAccess.GetTeachingTeachclasse(System.Linq.Expressions.Expression{System.Func{accreditation.Model.TeachingTeachclasse,System.Boolean}})">
            <summary>
            根据条件获取教学班
            </summary>
            <param name="predicate">查询条件</param>
            <returns>教学班</returns>
        </member>
        <member name="M:accreditation.DataAccess.TeachingTeachclasseDataAccess.GetTeachingTeachclasseOrDefault(System.Linq.Expressions.Expression{System.Func{accreditation.Model.TeachingTeachclasse,System.Boolean}},accreditation.Model.TeachingTeachclasse)">
            <summary>
            根据条件获取教学班
            </summary>
            <param name="predicate">查询条件</param>
            <param name="defaultEntity">默认值</param>
            <returns>教学班</returns>
        </member>
        <member name="M:accreditation.DataAccess.TeachingTeachclasseDataAccess.CountTeachingTeachclasse(System.Linq.Expressions.Expression{System.Func{accreditation.Model.TeachingTeachclasse,System.Boolean}})">
            <summary>
            根据条件获取教学班数量
            </summary>
            <param name="predicate">查询条件</param>
            <returns>教学班数量</returns>
        </member>
        <member name="M:accreditation.DataAccess.TeachingTeachclasseDataAccess.SumTeachingTeachclasse(System.Linq.Expressions.Expression{System.Func{accreditation.Model.TeachingTeachclasse,System.Nullable{System.Int32}}},System.Linq.Expressions.Expression{System.Func{accreditation.Model.TeachingTeachclasse,System.Boolean}})">
            <summary>
            根据条件统计教学班
            </summary>
            <param name="selecter">统计字段</param>
            <param name="predicate">查询条件</param>
            <returns>统计值</returns>
        </member>
        <member name="M:accreditation.DataAccess.TeachingTeachclasseDataAccess.SumTeachingTeachclasse(System.Linq.Expressions.Expression{System.Func{accreditation.Model.TeachingTeachclasse,System.Nullable{System.Decimal}}},System.Linq.Expressions.Expression{System.Func{accreditation.Model.TeachingTeachclasse,System.Boolean}})">
            <summary>
            根据条件统计教学班
            </summary>
            <param name="selecter">统计字段</param>
            <param name="predicate">查询条件</param>
            <returns>统计值</returns>
        </member>
        <member name="M:accreditation.DataAccess.TeachingTeachclasseDataAccess.QueryTeachingTeachclasse(System.Linq.Expressions.Expression{System.Func{accreditation.Model.TeachingTeachclasse,System.Boolean}},Mooho.Base.Common.Pages)">
            <summary>
            根据条件查询教学班
            </summary>
            <param name="predicate">查询条件</param>
            <param name="pages">分页信息</param>
            <returns>教学班集合</returns>
        </member>
        <member name="M:accreditation.DataAccess.TeachingTeachclasseDataAccess.QueryTeachingTeachclasse(System.Linq.Expressions.Expression{System.Func{accreditation.Model.TeachingTeachclasse,System.Boolean}},System.Linq.Expressions.LambdaExpression,Mooho.Base.Common.Pages)">
            <summary>
            根据条件查询教学班
            </summary>
            <param name="predicate">查询条件</param>
            <param name="dynamicPredicate">动态查询条件</param>
            <param name="pages">分页信息</param>
            <returns>教学班集合</returns>
        </member>
        <member name="T:accreditation.DataAccess.DataBase">
            <summary>
            数据访问基类
            </summary>
        </member>
        <member name="P:accreditation.DataAccess.DataBase.Context">
            <summary>
            获取数据上下文
            </summary>
        </member>
        <member name="M:accreditation.DataAccess.DataBase.InitDynamicProxy">
            <summary>
            初始化动态代理
            </summary>
        </member>
        <member name="T:accreditation.DataAccess.Entities">
            <summary>
            实体
            </summary>
        </member>
        <member name="P:accreditation.DataAccess.Entities.AssessFragments">
            <summary>
            获取或设置考核分解项
            </summary>
        </member>
        <member name="P:accreditation.DataAccess.Entities.AssessMethods">
            <summary>
            获取或设置考核方式
            </summary>
        </member>
        <member name="P:accreditation.DataAccess.Entities.Courses">
            <summary>
            获取或设置课程
            </summary>
        </member>
        <member name="P:accreditation.DataAccess.Entities.CourseTargets">
            <summary>
            获取或设置课程目标
            </summary>
        </member>
        <member name="P:accreditation.DataAccess.Entities.CultivationProjects">
            <summary>
            获取或设置培养计划
            </summary>
        </member>
        <member name="P:accreditation.DataAccess.Entities.GraduationPoints">
            <summary>
            获取或设置毕业指标点
            </summary>
        </member>
        <member name="P:accreditation.DataAccess.Entities.GraduationReqs">
            <summary>
            获取或设置毕业要求
            </summary>
        </member>
        <member name="P:accreditation.DataAccess.Entities.StudentInfoes">
            <summary>
            获取或设置学生信息
            </summary>
        </member>
        <member name="P:accreditation.DataAccess.Entities.Syllabuses">
            <summary>
            获取或设置教学大纲
            </summary>
        </member>
        <member name="P:accreditation.DataAccess.Entities.TeacherInfoes">
            <summary>
            获取或设置教师信息
            </summary>
        </member>
        <member name="P:accreditation.DataAccess.Entities.TeachingTeachclasses">
            <summary>
            获取或设置教学班
            </summary>
        </member>
        <member name="M:accreditation.DataAccess.Entities.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            模型创建
            </summary>
            <param name="modelBuilder">模型生成器</param>
        </member>
        <member name="M:accreditation.DataAccess.Entities.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions)">
            <summary>
            构造实体
            </summary>
            <param name="options">选项</param>
        </member>
        <member name="M:accreditation.DataAccess.Entities.#ctor">
            <summary>
            构造实体
            </summary>
        </member>
        <member name="M:accreditation.DataAccess.Entities.ModelSetting(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            模型设置
            </summary>
            <param name="modelBuilder"></param>
        </member>
        <member name="T:accreditation.DataAccess.EntityFactory">
            <summary>
            实体工厂
            </summary>
        </member>
        <member name="M:accreditation.DataAccess.EntityFactory.CreateEntities">
            <summary>
            创建实体
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
